[
  {
    "text": "- WFL statements or a complete WFL job can be initiated from MARC by entering the word WFL before the statements.\n- Jobs initiated through the START statement can include all of the WFL constructs defined in the manual.\n- Three WFL statements recognized by MARC are START, COPY, and ADD.\n- WFL jobs can take advantage of distributed systems services between systems.\n- Terminal can be transferred to another BNA host with the command CONNECTTO <host specification>.\n- A job can be directed to run at a remote host by starting with AT <hostname constant>.\n- Messages generated by the job are routed back to the original terminal."
  },
  {
    "text": "- WFL is used for constructing jobs that compile or run programs.\n- WFL is a programming language with its own compiler.\n- A WFL job is recompiled each time it is run.\n- WFL can initiate programs in various languages accepted on ClearPath MCP systems.\n- WFL includes flow-of-control structures and subroutines similar to ALGOL.\n- WFL jobs are automatically restarted if interrupted by a halt/load.\n- WFL supports the MultiLingual System (MLS) with translation capabilities.\n- WFL and MCP must be at the same release level for proper functioning.\n- WFL has capabilities for compiling and running programs."
  },
  {
    "text": "- NOSUMMARY option is the only option of JOBSUMMARY attribute that affects job summaries.\n- STACK is an acceptable synonym for STACKSIZE in Memory Management.\n- The BACKUP, BDBASE, TODISK, and TOPRINTER options are the only options that affect printer output in Print Output.\n- The task attribute groupings include Job Summaries, Libraries, Memory Management, Print Output, and Task Initiation."
  },
  {
    "text": "- The document outlines integer constant primary definitions and related expressions.\n- Real Constant Expression is discussed, including primary definitions and related operations.\n- Different types of real constant primary are explained, such as real constant identifier and hexadecimal constants.\n- It references previous sections for explanations on integer and real expressions.\n- The document contains sections on DIV and MOD operations for real constant expressions."
  },
  {
    "text": "- The ALTER statement changes the file attributes of a disk file.\n- ALTER enters a waiting state when encountering a file that is currently open with EXCLUSIVE = TRUE.\n- Specific commands like <mixnumber> OF and <mixnumber> DS can be used to skip or exit processing files when using ALTER.\n- Different file attributes are available for the <alter attribute statement>.\n- Security attributes are interrelated, so changing one attribute might affect another.\n- ALIGNFILE attribute specifies a printer backup file with an alignment pattern.\n- ALIGNMENT attribute, when TRUE, performs alignment before printing.\n- ALTERNATEGROUPS attribute allows defining permissions for up to nine groups to access the file."
  },
  {
    "text": "- ARCHIVE RESTORE reloads files with archive backup directory entries.\n- RESTORE reloads files from any library maintenance tape, regardless of directory entries.\n- ARCHIVE RESTORE has variants: ARCHIVE RESTORE and ARCHIVE RESTOREADD.\n- ARCHIVE RESTORE reloads selected backup copies even if versions exist on destination disk.\n- ARCHIVE RESTOREADD reloads only if versions do not already exist.\n- Files are selected based on comparing requested files with archive directory records.\n- Privileged access is usually required to reload files other than your own.\n- The archive subsystem usually restores most recently written files, but can restore older versions under specific conditions.\n- Various conditions dictate when older versions of files are restored."
  },
  {
    "text": "- RESOURCE attribute in mainframe documents specifies the number of tape units needed by a task.\n- Job parameters can be utilized in the RESOURCE assignment as constant identifiers rather than variables.\n- The integer constant expression in the RESOURCE attribute must be between 0 to 255 when completely evaluated.\n- SUPPRESSWARNING attribute suppresses run-time warning messages for a process.\n- The SUPPRESSWARNING attribute can suppress warnings with the identifier \"ALL\", \"NONE\", or specific warning numbers in the range of 1 through 29999.\n- TASK Initiation information is found on page 8600, with the question located on line 1047-517."
  },
  {
    "text": "- Mainframe document page on Basic Constructs\n- Page includes content from sections 8\u201314\n- Document reference: 8600 1047-517\n- Task to answer a question in 100 words.\n- Emphasis on providing only factual or useful information."
  },
  {
    "text": "- When PERMANENTLYOWNED is set to TRUE, only tape files with a matching FAMILYOWNER can be written on the tape.\n- When SECURITYLABELS is set to TRUE, security attributes like SECURITYTYPE, SECURITYUSE, SECURITYGUARD, and FAMILYOWNER are maintained in the tape volume label for easy transfer among hosts.\n- A multivolume file must have matching SECURITYLABELS values for each volume.\n- A VOLUME statement cannot specify both SECURITYLABELS=TRUE and PERMANENTLYOWNED=TRUE.\n- SECURITYTYPE attribute controls access to physical files, with values like PRIVATE, PUBLIC, GUARDED, or CONTROLLED.\n- SECURITYGUARD identifies the guard file for GUARDED or CONTROLLED tape files."
  },
  {
    "text": "- Attributes of file variables return to original declaration state after file declaration.\n- Attributes of task variables reset to system default values after halt/load.\n- Values of constant identifiers in job parameter list are saved across halt/load.\n- ON RESTART statement can specify actions if job execution is interrupted.\n- Job execution restarts at most recent successful job rollout after halt/load.\n- Task variable value not retained across halt/load.\n- Boolean variable can be used to store task completion status across halt/load.\n- Integer variable can track job progress and be inspected in ON RESTART statement.\n- Dummy files can store information about job execution for decision-making."
  },
  {
    "text": "- REPORT option in library maintenance prints a report of copied files and errors encountered\n- SELECT option calls LIBMAINTSELECTOR procedure to determine if file should be copied\n- Instructions for coding custom LIBMAINTSELECTOR procedure in SYMBOL/ARCHIVESUPPORT DCALGOLSYMBOL file and MCP System Interfaces Programming Reference Manual\n- VERIFY option compares files' checksums to ensure correct copying\n- UNITNO designates hardware unit number of tape volume\n- WAITONERROR option issues RSVP message for errors, halting program until operator responds\n- RESTORE process ignores unspecified attributes for tape or CD-ROM volumes\n- Various tape and CD-ROM attributes available for the RESTORE statement"
  },
  {
    "text": "- WAITONERROR causes library maintenance to issue an RSVP message when an error occurs.\n- Possible errors include missing files or directories and failing to open a tape.\n- The RSVP message halts library maintenance until the operator or programmer responds with OK or DS.\n- Responding with OK allows library maintenance to continue with the copy process.\n- Responding with DS terminates the library maintenance program.\n- After handling the error, the COPY or ADD statement can be re-issued.\n- WAITONERROR cannot be used with FTP, NFT, or Host Services File Transfer.\n- A basic copy request includes a COPY or ADD verb, file/directory list, FROM source volume, and TO destination volume specifications."
  },
  {
    "text": "- ARCHIVE ROLLOUT statement frees in-use sectors on a disk family using the SECTORS option\n- ARCHIVE statement copies files to tape and removes files from disk based on user's request\n- If more sectors are specified than are in use, all files under the usercode are selected\n- HI system command can be used to check the progress of an ARCHIVE ROLLOUT statement\n- Examples of ARCHIVE ROLLOUT statements for freeing sectors and moving files between usercodes are provided\n- DRC option of ARCHIVE ROLLOUT statement can be used to roll out files based on user's DRC authorization\n- ARCHIVE VOLUME DELETE statement removes archive backup references to purged, overwritten, or damaged CD-ROMs or tape volumes"
  },
  {
    "text": "- DATAPATH assignment in a task attribute list uses string expressions for SDIR, SFAM, and SPATHELEMENT.\n- EXECUTEPATH attribute determines the directories used by the task for processing code files.\n- String expressions and string primaries evaluating to constants can be used for EXECUTEPATH in WFL job heading.\n- WFL job parameters can be used in constant expressions for EXECUTEPATH.\n- When EXECUTEPATH assignment appears in job heading or task equation, no parentheses are allowed.\n- Parentheses are required for EXECUTEPATH assignment in a task attribute list."
  },
  {
    "text": "- The COPY statement is used to copy disk files from disks, tapes, or CD-ROMs to disks, tapes, or CD-ROMs.\n- Various uses of the COPY statement include backup, selective restoration, transferring files between disk families, and copying software from tapes or CD-ROMs.\n- The ADD statement copies disk files between disks and tapes.\n- When using the ADD statement:\n  - For a disk destination, it copies only files not already on the destination disk.\n  - For a tape destination, it is equivalent to a COPY statement, overwriting existing files on the tape and copying requested files.\n- The ADD statement is not valid for CD-ROM volumes."
  },
  {
    "text": "- The PRINTPARTIAL file attribute and REQUESTNAME print modifier cannot be modified.\n- A nonexecutable object code file cannot be modified using the MODIFY statement, leading to the discontinuation of the job or processed subroutine.\n- After modifying an object code file that is a compiler, it needs to be designated as such again with the MC system command.\n- The identity specified in the MP system command is not preserved after modifying a code file, requiring the command to be reapplied.\n- An object code file with the APL attribute set to TRUE cannot be modified; the APL access must be disabled first by changing APL to FALSE with the ALTER statement.\n- Modifying an object code file associated with a database can lead to a database open error when the program accessing the database is run."
  },
  {
    "text": "- XREFFILES option generates files containing analyzed cross-reference information in the program\n- The files generated can be used in EDITOR and INTERACTIVEXREF\n- The titles of the generated files are XREFFILES/OBJECT/<file title>/DECS and XREFFILES/OBJECT/<file title>/REFS\n- Cross-reference information is written to a disk file in raw form\n- The compiler uses SYSTEM/XREFANALYZER to process the file and generate the XREFFILES\n- If syntax errors occur during compilation, the cross-reference information is discarded\n- The XREFFILES option should be SET before any source input is processed"
  },
  {
    "text": "- The STRING function adds leading zeros if the second integer expression is greater than the minimum number of characters needed for the first argument.\n- If the second integer expression is less than the required number of characters, the right-most characters are returned.\n- Using an asterisk (*) as the second parameter ensures the returned string will have no leading zeros and will be long enough to contain all the digits of the first argument.\n- An error occurs if the second parameter of the STRING function is less than 0 or greater than 1800.\n- Real expressions used as arguments are rounded to the nearest integer for the first argument and the fractional part is truncated for the second argument."
  },
  {
    "text": "- Valid character elements include uppercase letters, Arabic numerals, and specific EBCDIC characters.\n- Identifier elements consist of letters and digits.\n- Types of identifiers include Boolean, constant Boolean, file, integer, constant integer, label, real, and constant real.\n- Basic constructs are mentioned but not elaborated upon.\n- The element definitions are syntactically defined in a table format.\n- EBCDIC characters with hexadecimal codes greater than or equal to 4\"40\" are considered valid, excluding specific marks like double and single quotation marks.\n- The hyphen and underscore are specified as single character elements."
  },
  {
    "text": "- The # <string primary> syntax can be used to dynamically build names, host names, family names, usercodes, and passwords.\n- When the security option CASESENSITIVEPW is set, lowercase characters in a password name constant are not converted to uppercase, and certain special characters can be included.\n- Certain special characters are accepted in passwords when CASESENSITIVEPW is set.\n- The pound sign (#) cannot be the first character of a password.\n- An ampersand (&) cannot be used in a WRAP or UNWRAP statement unless the password is enclosed in double quotes.\n- A <wrap password> consisting of a <wrap password constant> is limited to 215 characters, with a max length of 256 when using a <string primary>."
  },
  {
    "text": "- Real expression is designated as 7-10 in arithmetic comparison.\n- Real formal parameter is listed as 3-5 in the document.\n- Remote files are discussed under section 5-34.\n- Release statement is outlined as 1-13 and 6-143.\n- Remove files operation is mentioned in section 6-17.\n- Resource task attribute assigns values in section 5-21.\n- Restarting interrupted file transfers is covered in the \"copy statement\" section (6-115).\n- Restore statement details are found in 6-148, 6-149, and 6-154.\n- Various attributes and options associated with the \"restore statement\" are highlighted in the document."
  },
  {
    "text": "- WFL jobs processing ALGOL tasks can cause exception events in ALGOL tasks.\n- WAIT statement in WFL can be used to wait for a specific TASKVALUE in an ALGOL task.\n- ALGOL statements can set TASKVALUE and cause exception events in WFL jobs.\n- The WHILE statement in ALGOL allows executing a statement while a condition is TRUE.\n- An infinite loop can occur if the Boolean expression in a WHILE statement never evaluates to FALSE.\n- Repeated execution of the same PROCESS statement by a WHILE statement may result in a runtime error."
  },
  {
    "text": "- File residence inquiry checks if a file is available if declared in the job.\n- Use file identifier for declared files, FILE <file title> for non-declared files.\n- File residence inquiry can check tape availability, not individual files on tape.\n- Invalid example: checking tape availability using file residence inquiry.\n- Can check existence of global data specification using file residence inquiry.\n- File attributes like RESIDENT can replace file residence inquiry for checking file residence.\n- RESIDENT attribute used to check local host declared file residence.\n- Facts should be presented separately for clarity and understanding."
  },
  {
    "text": "- Job Structure is discussed in section 3-1\n- Declarations are covered in section 4, with Declaration Syntax outlined in section 4-1\n- Variable Initialization is discussed in section 4-2\n- Boolean, Integer, Real, String, File, and Task Variables are included in the Declaration list in section 4\n- Subroutines and Subroutine Parameters are detailed in section 4-7 and 4-8 respectively\n- Global Data Specifications are provided in section 4-9\n- Task Initiation is covered in section 5, with Task Initiation Statements discussed in 5-1\n- Task Equation and Task Attributes are outlined in sections 5-3"
  },
  {
    "text": "- COPY statement can be used to copy files locally using library maintenance\n- File transfer services for copying to remote hosts are discussed at the end of the section\n- COPY statement examples for copying files between disk and tape are provided\n- Different options like COMPARE and VERIFY can be used for double-checking the copy\n- The syntax for specifying source and destination files/folders is demonstrated\n- Tasks and task variables can be used to check the success of the copy operation"
  },
  {
    "text": "- Statements in a job can be nested to a maximum depth of 19 levels\n- Syntax diagrams for statements may contain elements explained in Sections 7 and 8\n- Many statements allow specifying values for file attributes or task attributes\n- Detailed descriptions of file and task attributes are covered through WFL usage\n- File attribute descriptions can be found in the File Attributes Programming Reference Manual\n- Task attribute descriptions can be found in the Task Attributes Programming Reference Manual"
  },
  {
    "text": "- Mainframe document structure includes identifiers and constants.\n- Identifiers have components like string primary and letter/digit combinations.\n- Constants can consist of characters like hyphens, periods, and underscores.\n- User data elements include usercodes and passwords.\n- Tape names are structured as a specific name.\n- Family names and group names are present in the document.\n- The document refers to a hostname element.\n- The text page mentions a specific string primary format.\n- The document indicates a usercode and password name constant.\n- Basic Constructs section includes information related to data elements like 8600 and 1047-517."
  },
  {
    "text": "- Usercode can be specified at the beginning of a job using the syntax USERCODE=UC.\n- The system searches for a file named OBJECT/TEST under different file titles and family names in a specific order.\n- Changing OBJECT/TEST to *OBJECT/TEST affects which file titles and family names are used in the search.\n- The statement COPY *= FROM T1(KIND=TAPE) copies all files from the tape T1 without considering usercodes in the file names.\n- An interchange file name is surrounded by single quotation marks and can be up to 250 characters long.\n- The CHANGE statement can modify filenames, such as changing *X/= to *USERCODE/=."
  },
  {
    "text": "- Railroad diagrams are used to understand the syntax for commands and statements\n- Railroad diagrams serve as quick references for commands and statements\n- Constant elements must be entered in full or as specific abbreviations\n- Variables represent data in the diagrams\n- Constants are never enclosed in angle brackets and are in uppercase letters\n- Variables in railroad diagrams are enclosed in angle brackets\n- Constants can be abbreviated if part of it appears in boldface\n- Variables can be replaced with data that meets the requirements of the command or statement constraints"
  },
  {
    "text": "- Task attributes are grouped into functional categories in Table 5-1.\n- Attributes with a type of task or event are not available through WFL.\n- More detailed information on task attributes can be found in the Task Attributes Programming Reference Manual.\n- The Task Attribute Groupings include Billing, Host Services Tasking, Data Comm, and Debugging.\n- Examples of task attributes listed in the table include CHARGE, USERCODE, HOSTNAME, ITINERARY, AUTOSWITCHTOMARC, and DISPLAYONLYTOMCS.\n- The form of the name construct allowing 17 EBCDIC characters other than quotation marks is not supported.\n- The Task Initiation section includes options like OPTION, TADS, and TASKFILE."
  },
  {
    "text": "- The OPTION command can be used to set options for running a program.\n- The syntax allows for using string variables and expressions to assign option values.\n- Parentheses are optional for option assignments in certain contexts, but required in others.\n- Examples show the use of OPTION in job attribute list, task declaration, task equation list, and task assignment statement.\n- Different options like FAULT, ARRAYS, FILES can be set using the OPTION command.\n- The text provides a detailed guide on using OPTION command effectively in various scenarios."
  },
  {
    "text": "- Jobs with AT <hostname constant> specification run on a specific system.\n- Object code files for tasks are searched on the specified system.\n- Tasks can run on different systems than the parent job by specifying the HOSTNAME attribute.\n- Messages from tasks are routed back to the original terminal with the system name prefix.\n- WFL COPY statement can copy files between MCP hosts, BNA hosts, and TCP/IP network hosts.\n- Host Services file transfer is used for file transfer between BNA hosts.\n- WFL jobs can be initiated from user programs in different programming languages using specific statements."
  },
  {
    "text": "- The provided text page contains commands for changing file names on different packs and disks.\n- The job demonstrates the use of optional results like BOOLEAN variables, INTEGER COUNT, and various conditions.\n- It includes displaying messages based on the results of the file name changes, such as missing files or security errors.\n- There is a section for COMPILE or BIND statement with options for specifying compiler and library information.\n- The text provides a structured format for defining tasks related to compiling or binding processes."
  },
  {
    "text": "- File equations can be used to make a task read from or write to different files than usual.\n- File equations can also change the attributes of files used by a task.\n- Task can read from global data specifications or local data specifications instead of regular input files.\n- File equations can appear in task equation lists, compiler task equation lists, task declarations, and task assignment statements.\n- The intname in a file equation is the internal name for the file in the task.\n- FILECARDS is an acceptable synonym for FILE.\n- Task can be made to use a different file by file-equating the TITLE attribute.\n- Syntax for changing file attributes includes <intname> = <file title>.\n- Alternate syntax for changing the TITLE attribute is FILE INFILE (TITLE =(JACOB)INPUT/DATAONORDSPK). \n- File equations enable the specification of other attributes simultaneously.\n- Attributes of files used by a task can be changed via file equations."
  },
  {
    "text": "- The default MAXRECSIZE of a READER file is 14 words (84 characters), with a record containing 80 characters of valid data.\n- Data images are records of EBCDIC data, where DATA is a synonym for EBCDIC.\n- Local data specifications differ from global data specifications as they can only be used by a single task and can be included in subroutines.\n- When a task opens a card reader file, it looks for the first unread local data specification with the correct file name or no file name.\n- Giving each local data specification a title is recommended when multiple specifications are used to make it clear which input file each specification replaces."
  },
  {
    "text": "- Constants within a loop can be repeated any number of times until all options have been selected.\n- The first alternative path requires the ampersand and the constant ADDRESS.\n- The second alternative path requires the ampersand followed by constant ALTER and the variable <new value>.\n- Railroad diagrams show paths for command and statement constructions.\n- In the LOCK statement example, <file identifier> must be entered as shown within parentheses.\n- The OPEN statement example includes options for <database name>, INQUIRY, and UPDATE."
  },
  {
    "text": "- RESTORE statement copies files from library maintenance tape or CD-ROM to original disk families.\n- Separate statement ARCHIVE RESTORE reloads files with archive backup directory entries.\n- Family name after ORIGIN keyword specifies disk family from which file was originally copied.\n- RESTORE can copy files from tape or CD-ROM with files from multiple disk families.\n- RESTORE invokes *LIBRARY/MAINTENANCE process.\n- RESTOREADD copies files without existing copies on disk.\n- RESTOREREPLACE copies and replaces files with existing copies on disk.\n- Error message received if file without original disk family name is selected for restore.\n- Family substitution in job with RESTORE statement redirects copy to different family."
  },
  {
    "text": "- Optional parameters can be omitted using consecutive commas (,) or by specifying fewer actual parameters than formal parameters.\n- When fewer parameters are passed than expected by the job, all remaining parameters in the job parameter list must be specified as optional.\n- Named parameters can be used in combination with positional parameters.\n- Once a named parameter is used, the rest of the parameters must be named parameters.\n- Task identifier associates a task variable with the compilation of the specified job, not its execution.\n- Task state expression can be used to inquire whether the compile was successful.\n- Job can include both positional and named parameters in its parameter list.\n- START statement examples are provided for different scenarios of using positional and named parameters."
  },
  {
    "text": "- VOLUME DESTROYED changes the status of tape volumes to show they are no longer usable and cannot be requested unless there are no other backup copies.\n- VOLUME OFFSITE marks tape volumes as being offsite and the system will not request them unless no other backup copies exist.\n- VOLUME ONSITE marks tape volumes as no longer offsite; default value for a volume after VOLUME ADD is ONSITE.\n- VOLUME RECOVERED changes tape volumes to show they are no longer destroyed.\n- File attributes in the VOLUME statement include GROUP, which specifies access permissions for a group."
  },
  {
    "text": "- The ONTO clause functions similar to an AS clause for tape and CD-ROM destinations.\n- Library maintenance always writes a new file on the tape or CD-ROM when the ONTO clause is used.\n- Caution is advised when using the ONTO clause as the copy's integrity is not guaranteed.\n- The WFL compiler generates a syntax error if the ONTO clause is used in certain statements.\n- Restrictions exist for copying files onto existing disk files, such as matching values for certain attributes and allocated areas."
  },
  {
    "text": "- File equations can change object code file attributes but are often overridden by the compiler.\n- Security attributes of an object code file can be set through a file equation.\n- Global file equation for object code files produced by the compiler is not allowed.\n- Local data specifications in a COMPILE or BIND statement can be applied to either the compilation or resulting object code file.\n- Local data specifications can replace input files used by the compiler.\n- Local data specifications for execution override input files read by the program at runtime.\n- Run-time can override task equations set at compile time."
  },
  {
    "text": "- Task initiation initiates a process that runs in its own stack\n- Task initiation statements include commands like ADD, ARCHIVE, BIND, COMPILE, LOG, RUN, and START\n- Task security statements affect security privileges of the job and include ACCESS, PASSWORD, USER, and VOLUME\n- Communication statements provide the user or operator with job information and include INSTRUCTION and DISPLAY\n- File handling statements involve opening or closing files and different ways of closing files leaving them in various states"
  },
  {
    "text": "- The system can generate tape names in different forms based on the examples provided.\n- There is an \"ARCHIVE Tape Volume Attribute List\" included with various attribute options.\n- Attributes in the list include AUTOUNLOAD, BLOCKSIZE, COMPRESSIONCONTROL, COMPRESSIONREQUESTED, DENSITY, ENCRYPT, ENCRYPTVERSION, FAMILYOWNER, TAPE KIND, LIBMAINTAPPEND, and LIBMAINTDIR.\n- DENSITY attribute has multiple options like BPI1250, FMTAIT, FMTDLT10, FMTST9840, etc.\n- ENCRYPT attribute options include NO, AES256, AESGCM, and TDES.\n- Attribute options like FAMILYOWNER can be set to \"\", \"*\", or a specific user code."
  },
  {
    "text": "- Work Flow Language (WFL) is used for constructing jobs that compile or run programs.\n- WFL includes variables, expressions, and flow-of-control statements to offer a wide range of capabilities for task control.\n- The manual is a complete language reference for WFL users, catering to both beginners and experienced users.\n- This manual does not describe task attributes or file attributes in great detail, instead referring to separate Programming Reference Manuals for detailed information.\n- The audience for this manual consists of programmers and operators needing to write jobs that initiate and control tasks.\n- Users are expected to have prior experience with block-structured languages and familiarity with ClearPath MCP systems.\n- For detailed information on system commands entered at an operator display terminal, refer to the System Commands Reference."
  },
  {
    "text": "- A program written in WFL is referred to as a job.\n- Certain statements in WFL can be executed interpretively without producing an object code file.\n- ALTER, CHANGE, PRINT, REMOVE, RERUN, SECURITY, and START are statements executed interpretively in specific situations.\n- A WFL job can initiate other tasks, such as compilations and executions of user programs.\n- WFL jobs can be initiated from CANDE sessions using the WFL command or the START command.\n- The WFL command in CANDE passes text to the WFL compiler, allowing users to transmit entire jobs at once."
  },
  {
    "text": "- The FETCH specification allows operators to provide information about a job.\n- A maximum of 255 characters can be specified in the string constant expression for FETCH.\n- Jobs with a FETCH specification are suspended, showing a \"REQUIRES FETCH\" message on the waiting entries list.\n- FETCH messages can be displayed using the PF system command.\n- Jobs with FETCH can be reactivated using the CANDE OK command.\n- The system option 19 (NOFETCH) prevents FETCH from suspending job initiation.\n- System options can be set or displayed using the OP (Options) system command."
  },
  {
    "text": "- The given text includes options for compiling and running object code files.\n- The text mentions the use of the FAULT option both in compilation and during program execution.\n- String variables can be used to assign option values, allowing for flexibility in specifying options.\n- Parentheses around option values are optional in some contexts but required in others.\n- Examples are provided for OPTION assignments in different contexts such as job attribute list, task declaration, compiler task equation list, task equation list, and task assignment statement."
  },
  {
    "text": "- Tasks run in their own stack.\n- Task initiation involves statements, attribute assignments, file equations, task variables, and local data specifications.\n- WFL statements used for task initiation include ADD, ARCHIVE, BIND, COMPILE, and COPY.\n- The ARCHIVE statement allows different archive tasks like differential, full, incremental, merge, restore, restoreadd, and rollout.\n- BIND is used to combine object code files.\n- COMPILE is used to compile a program.\n- COPY is used to make file copies.\n"
  },
  {
    "text": "- DSONERROR causes library maintenance to terminate with a DS response in certain scenarios.\n- FAMILYINDEX designates a specific physical volume within a disk family.\n- PROPAGATE enables moved files and permanent directories to inherit security.\n- REPORT causes library maintenance to print a report of copied files, including errors.\n- SELECT calls the LIBMAINTSELECTOR procedure for each file to be copied.\n- SKIPEXCLUSIVE prevents moving files opened with EXCLUSIVE=TRUE or updated KEYEDIOII files.\n- VERIFY ensures new file copies are written accurately and are readable."
  },
  {
    "text": "- BEGIN JOB and END JOB can be omitted from a job entered after the WFL command in CANDE.\n- Jobs submitted through the CANDE WFL statement cannot include a CLASS, FETCH, or STARTTIME specification.\n- WFL control options must be followed by a semicolon to separate them from the rest of the job.\n- Messages generated by a WFL job initiated from a CANDE session are displayed at the terminal where the job originated and at the ODT.\n- CHANGE, PRINT, REMOVE, RERUN, SECURITY, and START statements are executed interpretively if one of them is the only statement following the CANDE WFL command.\n- WFL jobs can be saved in disk files using the CANDE MAKE command to create a file of type JOB."
  },
  {
    "text": "- Job verifies compilation success by checking task state of task variable\n- If compilation successful, \"COMPILED OK\" message displayed\n- Job sets JOBSUMMARY to SUPPRESSED if compile successful\n- Security of object code file set to PUBLIC IO post-compilation\n- XREFANALYZER utility used to analyze program identifiers\n- XREFANALYZER uses XREF/OBJECT/#PROGRAMNAME file\n- XREFANALYZER produces two output files\n- Job initiates maintenance tasks daily\n- Routine tasks include file removal, updates, and system option settings"
  },
  {
    "text": "- Attribute list in archive disk volume includes familyindex, kind, and serialno attributes.\n- CD volume attributes in the archive backup statement consist of cdcopies, density, multivolume, packetwrite, savefactor, serialno, encrypt, and offsite attributes.\n- The archive subsystem contains various attributes like autounload, blocksize, compressioncontrol, encrypt, familyowner, kind, locatecapable, multivolume, packetwrite, savefactor, scratchpool, securityguard, securitytype, securityuse, and serialno.\n- The archive statement includes different options such as compare, dsonerror, release, report, skipexclusive, and waitonerror.\n- Example sections are provided for actions like checking progress and specifying different options in archive operations."
  },
  {
    "text": "- The PRINTDEFAULTS attribute allows for specifying custom default values for print modifiers and print-related file attributes in tasks.\n- Default values set using PRINTDEFAULTS are applied to all PRINT statements and printer backup files created by the task.\n- Print attribute phrases and print modifier phrases in the printdefaults assignment list merge with the current print defaults.\n- The PRINTDEFAULTS attribute can be included in the USERDATAFILE associated with each usercode.\n- Values assigned directly to the PRINTDEFAULTS attribute of a task override default values inherited from the job.\n- File declarations in a task can override default file attributes and print modifier values."
  },
  {
    "text": "- Task control statements in WFL determine when a task runs, terminates, responds to error conditions, and under what usercode it operates.\n- Task control statements in WFL include ABORT, STOP, WAIT, ON, and USER.\n- ABORT and STOP statements are used to terminate a job or task prematurely in WFL.\n- The WAIT statement in WFL suspends job execution until specific conditions are met.\n- Examples of using the ABORT statement illustrate its functionality in WFL."
  },
  {
    "text": "- Railroad diagrams show standards for combining words and symbols into commands and statements.\n- Diagrams consist of paths that illustrate the allowable structures of the command or statement.\n- Paths in railroad diagrams represent the order in which the command or statement is constructed, shown with horizontal and vertical lines.\n- Many commands and statements offer multiple options, leading to different paths in the railroad diagram.\n- Railroad diagrams can be as complex as needed, serving as visual representations of commands and statements.\n- These diagrams highlight mandatory items and user-selected items within commands and statements."
  },
  {
    "text": "- ALGOL ZIP statement is part of ALGOL Programming Reference Manual, Volume 1.\n- COBOL74 and COBOL85 both have CALL SYSTEM WFL statement in their Programming Reference Manuals.\n- DCALGOL has a CONTROLCARD function in its Programming Reference Manual.\n- RPG programming has a ZIP operation code in its Programming Reference Manual.\n- Input from programs can be in array form or file form.\n- Jobs initiated from user programs inherit usercode and privileges of the initiating program.\n- Preferred method for jobs stored on tape is to copy them onto disk before starting.\n- Job files on disk can be removed and recopied from tape to conserve disk space."
  },
  {
    "text": "- The PRINTDEFAULTS attribute allows users to set custom default values for print modifiers and print-related file attributes.\n- When PRINTDEFAULTS is set for a task, the specified default values are applied to all PRINT statements and printer backup files created by the task.\n- Print attribute and print modifier phrases in the printdefaults assignment list modify the current print defaults.\n- The PRINTDEFAULTS attribute can be included in the USERDATAFILE for each usercode.\n- Default values established for a job are inherited by tasks initiated by the job but can be varied using task assignment statements.\n- File declarations in a task can override default file attributes and print modifier values."
  },
  {
    "text": "- The MODIFY statement can be used to change attributes of object code files.\n- Attributes that can be changed include PRIORITY and FAMILY.\n- The INITIALIZE statement can be used in conjunction with the MODIFY statement.\n- The MOVE statement is used for library maintenance to copy disk files between disk families.\n- When a file is successfully copied to a destination disk, the original file is removed from the source disk.\n- Archive backup information for each file copied is moved from the source disk archive directory to the destination disk."
  },
  {
    "text": "- File names consist of nodes separated by a slash (/).\n- A file name can have from 1 to 12 nodes.\n- Using \"=\" as the last node in certain statements treats it as a directory name.\n- Long file names can have from 1 to 20 nodes and a maximum node size of 215 characters.\n- If long file names are disabled, certain constructs are redefined.\n- Not all Unisys software supports long file names.\n- For more information about long file names, refer to the System Operations Guide."
  },
  {
    "text": "- Boolean operators in the mainframe document include AND, EQV, IMP, NOT, and OR.\n- Boolean variables are present in the document within the context of Boolean declaration.\n- The document mentions Boolean relational operators as part of Boolean expressions.\n- Boolean parameters can be declared within the text, specified by a specific format.\n- Boolean constants and constants expressions are described in the document.\n- Various statements such as CASE, CATALOG, and CHANGE are detailed with examples.\n- The document covers different attributes like ccsversion, cdcopies in different contexts such as alter statement and archiving CD volume attributes."
  },
  {
    "text": "- BIND statement invokes the Binder to combine object code files.\n- Binder uses primary input file CARD for directions and host file HOST for object code to bind subprograms.\n- Subprogram files are included for binding to the host program.\n- Detailed explanation and syntax can be found in the COMPILE or BIND Statement sections.\n- Binder Reference Manual provides instructions on utilizing Binder.\n- Example job using BIND statement involves specifying object code files and libraries.\n- Binder data is structured with specific directives and input files.\n- END JOB statement concludes the BIND process."
  },
  {
    "text": "- Mainframe document titled \"Declarations\"\n- Document reference number: 4-12 8600 1047-517\n- Instruction to answer a question within 100 words"
  },
  {
    "text": "- Optional to specify one serial number for CD-ROM volumes during backup\n- Default serial number format if not specified: YYMMDD\n- Archive task equation list includes <task attribute assignment> and <library equation>\n- Task attribute assignment assigns attributes to ARCHIVE statement\n- Library equation changes library attributes for archive subsystem\n- Library-equating SELECTOR uses <file title> library instead of standard SL ARCHIVESUPPORT library\n- TASKSTRING can specify disk family for temporary storage during archive backup to CD-ROM\n- TASKSTRING with \"FAMILYNAME=<familyname>\" stores temporary CDIMAGE disk file on specified disk family\n- TASKSTRING with multiple <familyname> starts with first family in the list"
  },
  {
    "text": "- Keyword OPTIONAL indicates actual parameter not needed\n- Default values for BOOLEAN, INTEGER, REAL, STRING\n- DEFAULT clause for specifying default values\n- Job parameter list for WFL jobs stored on disk\n- Job must be initiated through CANDE, MARC, or WFL START statement\n- Job with AT <hostname constant> cannot have job parameter list unless all parameters optional\n- Multiple jobs stored in disk file cannot have job parameter lists\n- Example job using job parameter list with START statement\n- Job structure provided in the text"
  },
  {
    "text": "- Task Attribute Groupings are detailed in Table 5-1.\n- Expressions for Task Attribute Inquiry can be found in Section 5-2.\n- Different types of File Attribute Types are outlined in Table 5-3.\n- Instructions for File Attribute Inquiry expressions are provided in Section 5-4.\n- Elements of a Railroad Diagram are explained in Appendix C-1."
  },
  {
    "text": "- When using the COPY command with an asterisk (*) in the directory specification, no files are selected for copying.\n- If the COPY command specifies a directory without an asterisk (*) or specific usercode, only files under the task usercode that match the directory specification are selected for copying.\n- When using the AS or ONTO option with the COPY command and the directory does not indicate an asterisk (*) or specific usercode, files are selected either from the asterisk (*) directory or the task usercode, but not from both.\n- COPY to KIND=CD writes an image of a library maintenance format CD-ROM to a temporary disk file for transfer to a blank CD-R disc mounted on a CD-R drive.\n- CD-R drives can function as CD-ROM drives when reading discs and also write to blank write-once CD-R media to create CD-ROMs."
  },
  {
    "text": "- Embedded periods in tape names terminate the name unless the entire name is enclosed in quotes.\n- CREATE LIBMAINTDIR statement options include REPORT, DSONERROR, and WAITONERROR.\n- DSONERROR option causes library maintenance to terminate with a DS response in case of errors, removing the new LIBMAINTDIR file from the disk.\n- REPORT option prints a report of errors encountered during library maintenance.\n- WAITONERROR option issues an RSVP message on error, halting library maintenance until operator response.\n- Possible errors include I/O errors reading from tape and errors writing to LIBMAINTDIR disk file.\n- SERIALNO attribute in CREATE LIBMAINTDIR identifies specific tapes to be read in a specific order.\n- Correct serial numbers and order should match the set of tapes originally created."
  },
  {
    "text": "- Job verifies compilation success by checking task state of task variable attached to compilation.\n- If compilation successful, displays \"COMPILED OK\" message.\n- Error file created by compilation prompts message about checking for warnings.\n- JOBSUMMARY attribute set to SUPPRESSED if compile successful to suppress job summary.\n- Security of object code file set to PUBLIC IO for user accessibility.\n- XREFANALYZER utility used to analyze identifiers in program.\n- XREFANALYZER uses file XREF/OBJECT/#PROGRAMNAME created during compilation.\n- Two output files of XREFANALYZER also set to PUBLIC IO.\n- Job initiates daily maintenance tasks.\n- Other jobs and programs remove unwanted files, update files, and set system options."
  },
  {
    "text": "- Task control statements in WFL determine when a task is run, terminated, how it responds to error conditions, and under which usercode it runs.\n- The ABORT and STOP statements in WFL are used to terminate a job or task prematurely, with ABORT indicating abnormal termination and STOP indicating normal termination.\n- The WAIT statement in WFL suspends job execution until specified conditions are met, such as waiting for an asynchronous task to complete or for a file to become resident.\n- Task control statements include ABORT, STOP, WAIT, ON, and USER statements in WFL.\n- ABORT statement displays messages for abnormal termination, while STOP statement indicates normal termination.\n- The WAIT statement in WFL can be used for various purposes like waiting for asynchronous tasks to complete or for user input."
  },
  {
    "text": "- INSTRUCTION statements are used to specify actions in a mainframe job.\n- The second \"INSTRUCTION 5;\" statement sets a specific instruction as the current one.\n- Operator can request the most recent instruction which helps in locating certain resources.\n- LOCK statement in mainframe system is used to close and lock specified files.\n- LOCK statement releases file buffer areas and unassigns logical file from physical file.\n- If a file locked is a tape file, it will be rewound and unloaded.\n- If a file locked is a disk file, it remains as a permanent file on disk."
  },
  {
    "text": "- Usage of COPY statement with FTP to transfer files from a remote host to a local host using specific parameters like FTPTYPE, USERCODE, HOSTNAME, and AUTHMODE.\n- Example provided for transferring files from a directory on a remote host to a local MCP host, emphasizing the interchange name for preserving directory case.\n- Automatic restart of interrupted COPY statement in WFL job after a host or network failure, depending on the type of transfer (local, remote with different services).\n- Explanation of file retransfer scenarios based on the type of transfer service used (Host Service File Transfer, FTP, NFT) and the presence of the FROMSTART option.\n- Details about NFT resuming the copying process based on destination volume characteristics and the impact of specifying the FROMSTART option on retransferring files."
  },
  {
    "text": "- The START AND WAIT statement initiates a second job as a dependent task within a WFL job and waits for the dependent task to complete.\n- Boolean identifiers are set to true based on successful compilation and completion of the dependent task.\n- Various restrictions apply, such as the prohibition of the FOR SYNTAX phrase and using a task identifier with the dependent task.\n- The ABORT statement can terminate both the dependent task and the parent job; using ABORT [MYSELF] terminates only the dependent task.\n- The behavior of the dependent task is similar to a bit 38 set in a CONTROLCARD ZIP WITH ARRAY call.\n- The STOP statement can terminate a job or asynchronous subroutine, handling asynchronous subtasks accordingly."
  },
  {
    "text": "- LIBMAINTAPPEND = TOENDRESTORE stops append request if error occurs while copying to tape.\n- LIBMAINTDIR determines creation of tape directory disk file on DL LIBMAINTDIR disk family.\n- Information stored in LIBMAINTDIR files include tape serial numbers, file names, and other file attributes.\n- SYSTEM/FILEDATA utility program provides report on tape directory disk files.\n- LOCKEDFILE attribute sets file protection on destination library tape.\n- MULTIVOLUME setting creates multivolume set of CD-ROMs for data overflow."
  },
  {
    "text": "- ENTITY REFERENCE is followed by variables ADVISOR1 and INSTRUCTOR.\n- Parentheses are required for ENTITY REFERENCE variables.\n- Variables in ENTITY REFERENCE can be repeated any number of times in a loop.\n- PS and MODIFY are constants followed by request numbers in PS MODIFY commands.\n- Request numbers can be followed by commas in PS MODIFY commands due to loops.\n- PS MODIFY commands may include user-selected request numbers and file attribute phrases.\n- MODIFY in PS MODIFY commands can be abbreviated to its minimum form.\n- Railroad Diagrams are used for understanding command structures in mainframe documents."
  },
  {
    "text": "- A job can be initiated with a START statement that specifies parameters.\n- Subroutines can be called multiple times with different parameter values to avoid code repetition.\n- A subroutine can invoke itself for repetitive processing.\n- Subroutines can call on other subroutines within the same job.\n- The RETURN statement can be used to exit a subroutine early.\n- Parameters can be passed between jobs and subroutines for processing.\n- The example demonstrates the use of IF statements to control subroutine execution.\n- The job examples illustrate the utility of subroutine invocations for efficient coding."
  },
  {
    "text": "- Optional parameters in a positional parameter list can be omitted using consecutive commas or by specifying fewer actual parameters than formal parameters.\n- When passing fewer parameters than expected by a job, all remaining parameters in the job parameter list must be specified as optional.\n- Named parameters can be combined with positional parameters, but once a named parameter is used, the rest of the parameters must also be named.\n- The task identifier associates a task variable with the compilation of a specified job, not its execution.\n- A task state expression can be used to inquire whether the compile was successful.\n- Job executions can be scheduled with specified start times."
  },
  {
    "text": "- WAITONERROR causes library maintenance to issue an RSVP message when an error occurs.\n- Errors that trigger the RSVP message include missing files or directories, copying errors, and other issues that halt library maintenance.\n- The RSVP message requires a response from the operator or programmer\u2014OK to continue maintenance, DS to terminate the program.\n- Null statements are used in flow-of-control statements when no action is desired.\n- A null statement can be generated within certain flow-of-control statements without using a statement separator.\n- Invalid characters at the start of a line also act as statement separators."
  },
  {
    "text": "- Serial numbers for reels in a multiple reel tape file can be left empty.\n- Specific reel serial numbers can be omitted in the file equation.\n- The File Attributes Programming Reference Manual provides a table mapping attribute types to those used in the manual.\n- Certain attribute types cannot be accessed through WFL.\n- Valid file attribute types include Boolean, integer, mnemonic, and pointers.\n- The table presents corresponding WFL types for different file attribute types.\n- Long file names are associated with the LFILENAME attribute.\n- Long titles are linked to the LTITLE attribute."
  },
  {
    "text": "- CRUNCH statement closes and crunches a file on a mainframe system\n- Crunching a file returns unused disk space back to the system\n- Crunched files cannot be expanded further\n- DISPLAY statement logs and displays string expressions up to 430 characters\n- DISPLAY statement can accept up to 1799 characters\n- Integer and real variables can be displayed by converting them to string values using the STRING function\n- Examples of DISPLAY statement: \"HI THERE\", \"DISPLAYPROGNAME& DID NOT COMPILE\"\n- Creation of a new LIBMAINTDIR tape directory disk file from a specified TPACK serial number interval"
  },
  {
    "text": "- GROUPRWX specifies access permissions for group members matching the group attribute of the file.\n- GUARDOWNER, when used with USEGUARDFILE, defines access permissions for the file owner.\n- MATCHONLYSERIALNO, when TRUE, skips checking tape names and creation dates in the tape volume directory.\n- OTHERR grants read-access to other users, excluding owner and group members.\n- OTHERW grants write-access to other users, excluding owner and group members.\n- OTHERRWX specifies access permissions for all other users, excluding owner and group members.\n- OWNERR grants the owner read access to the file.\n- OWNERW grants the owner write access to the file."
  },
  {
    "text": "- Job initiation process\n- Document reference: 8600 1047-517\n- Question requires a 100-word answer"
  },
  {
    "text": "Job initiation for code 8600 1047-517.\nExpectation to answer a question in 100 words.\nEach fact will be presented on a separate line."
  },
  {
    "text": "- Password aging feature can be found in both access code and user code assignments.\n- Patching information can be found in section A-2.\n- Port number information is provided in section 6-79.\n- Predefined words are detailed in section B-1.\n- Print statement details are explained in sections 6-136 and 6-137.\n- Printer Backup Files information is under the EXTMODE value in sections 6-9 and 6-10.\n- Process start and process statement are discussed in sections 1-4 and 6-141.\n- Purge statement is found in sections 1-13, 6-142, and 6-143."
  },
  {
    "text": "- The FAMILY attribute in WFL determines the families used for creating or searching files.\n- String expressions and string primaries that evaluate to constants can be used for FAMILY in WFL job heading.\n- Most WFL statements can locate files on either primary or alternate family, but certain statements like ADD, ALTER, ARCHIVE, etc., do not search the alternate family.\n- Family assignments can use previously defined string variables, string expressions, or task variables.\n- The FAMILY assignment for task variables does not require a number sign (#) before the expression.\n- Family assignments for tasks can either be declared or inherited from the most recently assigned task."
  },
  {
    "text": "- WFL jobs contain two mandatory elements: BEGIN JOB and END JOB constructs.\n- The job body includes a declaration list (optional) and a statement list.\n- The <i> construct must appear in the first column of the line.\n- Comments can be added to the job by starting with a percent sign (%), which is ignored by the WFL compiler.\n- WFL control options can be included in the job by starting the line with a dollar sign ($).\n- The <i> construct before the BEGIN JOB is optional, while it is required before END JOB if an AT <hostname constant> specification is included.\n- AT <hostname constant> specification allows a job to be run on a different system."
  },
  {
    "text": "- Source volume is mentioned in the context of unwrap and wrap requests (6\u2013170, 6\u2013188).\n- Slash (/) is described as a real operator in one context and as a string operator in another (7\u201310, 7\u201313).\n- Start statement allows for job initiation (1\u20134, 1\u20138, 5\u20132, 6\u2013162, 6\u2013163).\n- Statements like abort, add, alter, archive backup, and more are part of the available options (6\u20134, 6\u20136, 6\u201317, 6\u201319).\n- Task initiation can be done through a task control statement (1\u20134, 5\u20131)."
  },
  {
    "text": "- The PROCESS statement initiates tasks asynchronously.\n- A task equation list and a task variable can usually be specified when using PROCESS with specific statements.\n- If a task variable is attached, a WAIT statement can be used to make the job wait for the task to terminate or reach a specific state.\n- The name of a subroutine task initiated by a PROCESS statement is set by WFL when the subroutine is invoked.\n- Care should be taken when using global variables in an asynchronous subroutine because multiple processes can access the variable simultaneously.\n- Repeatedly executing the PROCESS statement with the same task variable and an active task can lead to a run-time error."
  },
  {
    "text": "- If LIBMAINTAPPEND is set to NO or not specified, the copy procedure copies to a new tape.\n- Setting LIBMAINTAPPEND to TOEND allows library maintenance to search for an existing tape with specified name and serial number.\n- When using LIBMAINTAPPEND with a SERIALNO list, the first serial number helps identify the tape set for appending files.\n- Additional serial numbers in the SERIALNO list are used to add new tape volumes to the set but must not conflict with existing serial numbers.\n- A tape specified for LIBMAINTAPPEND must be created with LIBMAINTDIR = TRUE.\n- LIBMAINTAPPEND = TOEND cannot be used for tapes with previous copying errors."
  },
  {
    "text": "- Free formatting in WFL allows constructs to be entered in any column of a line and continue over any number of lines.\n- WFL is case-insensitive, allowing keywords and variables to be in uppercase, lowercase, or mixed case.\n- CASESENSITIVEPW security option makes passwords case-sensitive and allows special characters like & - { } \\ ~, etc.\n- The pound sign (#) and the ampersand (&) have specific rules when used in passwords in WRAP or UNWRAP statements.\n- A percent sign (%) can be used for comments in WFL code.\n- Subroutine ending identifiers in WFL can be repeated after the END statement to clarify nested subroutine endings."
  },
  {
    "text": "- When accesscode password-aging is enabled, the WFL compiler gives a warning if the accesscode password specified for a job is in the warning state and an error if the password has expired.\n- The CORE attribute provides an estimate of memory required to schedule a task.\n- Examples of assigning values for accesscode and password variables in WFL.\n- Examples of assigning values for total core based on constants or product/sum of integer variables.\n- Task Initiation section with a page number \"5-12 8600 1047-517.\""
  },
  {
    "text": "- Null statement takes no action, useful in task control or nested flow-of-control statements\n- Assignment statement assigns values to declared variables\n- Compound statement groups other statements together for inclusion in flow-of-control\n- Flow-of-control statements control order of execution or conditions met, including CASE, DO, GO, IF, WHILE\n- Subroutine control statements invoke or exit subroutines\n- Task control statements affect task execution, like ABORT, INITIALIZE, ON, RERUN, STOP, WAIT"
  },
  {
    "text": "- System uses a serial number of the form YYMMDD for archive backups on CD-ROMs.\n- Tape volumes normally have unique serial numbers for easy locating and loading.\n- When making an archive backup to a CD-ROM volume, pick a volume name and optional serial number for easier restoration.\n- Volume sequence number identifies which CD-ROM volume is needed during a restore if multiple volumes were used during backup.\n- CD-ROM volumes cannot have serial numbers put on them in advance; if specified in the backup statement, all volumes receive the same serial number."
  },
  {
    "text": "- Complex task attribute assignments are for attributes that require complex or unusual values.\n- The ACCESSCODE assignment assigns an accesscode to a task.\n- Syntax for these assignments is discussed in following pages.\n- The ACCESSCODE attribute can be assigned a null value by using ACCESSCODE=\"\".\n- To change the password of a job, the ACCESS statement must be used.\n- Task Attributes Programming Reference Manual elaborates on the uses of these attributes."
  },
  {
    "text": "- Task variables can be reused (5\u201325).\n- Jobs can be run on a remote host (2\u20136).\n- Security settings can be managed through various attributes like security admin, security guard, security mode, security labels, security type, and security use (6\u2013159 to 6\u2013183).\n- Sensitivedata attribute is available for altering security settings (6\u201315).\n- Serial numbers can be assigned and managed in different contexts like serial number list and serial number assignment (5\u201336 to 5\u201337).\n- setgroupcode and setusercode attributes can be used to assign group and user codes (6\u201315).\n- Simple task relations can be established using wait specification (6\u2013184)."
  },
  {
    "text": "- Main topic: Expressions\n- Document reference: 7-28 8600 1047-517\n- Task: Answering a question in 100 words\n- Specific wording required: Facts or helpful information only\n- Answer to be presented with each fact on a separate line."
  },
  {
    "text": "- ENTITY REFERENCE is followed by variables like ADVISOR1 and INSTRUCTOR, enclosed in parentheses.\n- Multiple variables can be listed after ENTITY REFERENCE, such as ADVISOR2 and ASST_INSTRUCTOR.\n- In PS MODIFY requests, variables (e.g. request numbers) can be listed sequentially or separated by commas.\n- The file attribute phrase can be denoted by a user-selected variable, like DESTINATION = \"LP7\".\n- The PS MODIFY constants can be abbreviated to their minimum allowable form for efficiency.\n- Railroad diagrams contain loops where variables can repeat any number of times."
  },
  {
    "text": "- SECURITYTYPE attribute can have values of PRIVATE, PUBLIC, GUARDED, or CONTROLLED.\n- SECURITYTYPE attribute applies to installations running the Security Accountability Facility software.\n- SECURITYUSE attribute specifies how a tape volume protected by SECURITYTYPE can be accessed by nonprivileged users.\n- SERIALNO attribute identifies specific tape volumes for file copying, without a default value.\n- SCRATCHPOOL attribute identifies the scratch pool for retrieving tapes, with a 17-character identifier.\n- USECATALOG attribute indicates whether a listed tape in the volume library should be used for archiving."
  },
  {
    "text": "- Positional parameter lists can have optional parameters omitted with consecutive commas or fewer actual parameters.\n- When fewer parameters are passed than expected by the job, remaining parameters in the list must be specified as optional.\n- Named parameters can be combined with positional parameters, with positional ones listed first followed by named ones.\n- Once a named parameter is used, the rest of the parameters must also be named parameters.\n- Optional parameters can be used in different combinations using either only positional, only named, or both positional and named parameters.\n- The task identifier in a job associates a task variable with the compilation of a specified job, not its execution."
  },
  {
    "text": "- EBCDIC is a data type in the mainframe documents.\n- The end job construct is mentioned in section 3\u20132.\n- The if statement is discussed in relation to section 6\u2013122.\n- The unlock statement appears in section 6\u2013124.\n- The bitwise EQV operator is explained in section 7\u20132.\n- The accept function example is in section 7\u201316.\n- The file equations are detailed in section 5\u201330.\n- The octal function is explained in section 7\u201312.\n- Identifiers are discussed in section 8\u20133.\n- The timedate function is introduced in section 7\u201320."
  },
  {
    "text": "- System generates tape names in specific formats.\n- Tape volume attributes include autounload, blocksize, compression control, compression requested, density, encrypt, encrypt version, family owner, tape kind, libmaintappend, and libmaintdir.\n- AUTOUNLOAD attribute options are ON, OFF, DONTCARE.\n- BLOCKSIZE attribute takes an integer value.\n- COMPRESSIONCONTROL can be set to USER or SYSTEM.\n- DENSITY attribute options include various BPI values and tape formats.\n- ENCRYPT can be set to NO, AES256, AESGCM, or TDES.\n- ENCRYPTVERSION can be V1 or V2.\n- FAMILYOWNER can be empty, \"*\", or a specific user code.\n- TAPE KIND attribute is present in the list.\n- LIBMAINTAPPEND can be set to NO or TOEND.\n- LIBMAINTDIR statement is used.\n- The tape volume attribute list provides detailed options and settings for tape handling on the system."
  },
  {
    "text": "- Packet write recording is discussed on page 6-93.\n- The label attribute is mentioned in various statements like alter, go, and for on pages 6-11, 6-120, and 3-16, respectively.\n- The length function is related to integer primary and is found on page 7-9 and 7-8.\n- Library maintenance statements include copy statement on page 6-63.\n- The lowercase function is detailed on pages 7-22 and 7-27.\n- Library maintenance features are explained on page 6-63."
  },
  {
    "text": "- BEGIN JOB and END JOB can be omitted from a job entered after the WFL command in CANDE\n- Jobs submitted through the CANDE WFL statement cannot include a CLASS, FETCH, or STARTTIME specification\n- WFL jobs initiated from a CANDE session display messages at the terminal where the job originated\n- CHANGE, PRINT, REMOVE, RERUN, SECURITY, and START statements are executed interpretively when following the CANDE WFL command\n- WFL jobs can be saved in files on disk using the CANDE MAKE command to create a JOB file\n- More than one job can be stored in a single disk file and executed in the order they appear\n- WFL can open PUBLIC SECURED files and the EXECUTE attribute is updated if compilation is successful"
  },
  {
    "text": "- TF1 and X are Boolean and integer constant identifiers passed in as job parameters.\n- Boolean constant expression can include NOT, AND, OR, EQV, and IMP operators.\n- Boolean constant primary can involve identifiers, arithmetic constant comparisons, and string constant comparisons.\n- Real and integer constant expressions are part of arithmetic constant comparisons.\n- String constant comparisons include equal (EQL) and not equal (NEQ) comparisons.\n- Integer constant expression can involve addition and subtraction operators.\n- Detailed explanations of Boolean expressions are provided for the various types."
  },
  {
    "text": "- Unwraps wrapped files\n- Copies other files as CDATA files\n- Destination directly following an unwrap file list has scope only for that list\n- Destination not following an unwrap file list uses destination in the unwrap volume; DISK used if no destination in unwrap volume\n- Ambiguity of destination resolved for consistency with previous semantics\n- File number attribute can be used to select a file by position within the directory\n- Use FILEDATA NAMELIST request to determine file number of a file in a container\n- PASSWORD attribute for decrypting files specified on either source family name or container file name\n- RECOVER option in UNWRAP statement attempts recovery of internal wrapped files from bad containers\n- DSONERROR option causes unwrap process to abort upon encountering an error"
  },
  {
    "text": "- Keywords are located at B-3\n- The multivolume keyword is located at 6-92\n- The file declaration is found at 4-1 and 4-5\n- File handling statements are mentioned at 1-13 and 6-3\n- The file identifier is detailed at 8-3\n- File management statements include alter, archive release, change, modify, archive purge, security, mkdir, print, remove, and volume\n- File residence inquiry is discussed at 7-3\n- File security can be changed and has attributes like file selection and security statement\n- The file title is present in various contexts such as binder title, compiler title, and database title."
  },
  {
    "text": "- Setting OWNERX to TRUE grants the owner execute access to the file.\n- The mnemonic values for OWNERRWX specify the owner's permissions for a file, including Read, Write, Execute combinations.\n- Family substitution is used with an active family specification in a job or task, where only the primary family name is utilized.\n- PAGECOMP specifies formatting options for file printing.\n- PRINTERKIND specifies the type of device for file printing.\n- PRODUCT attribute stores a message of up to 250 characters to associate software with an application, product, and component.\n- PROPAGATESECURITYTODIRS, when set to PROPAGATE on a permanent directory, assigns security attributes to subdirectories within it."
  },
  {
    "text": "- Scratch tapes used in archiving procedures should be labeled with an unchanging serial number visible on the tape exterior.\n- Archive scratch tapes should be used in numeric sequence.\n- Tape volumes have serial numbers assigned in advance with the SN (Serial Number) system command.\n- CD-ROM volumes do not have serial numbers assigned in advance; serial numbers are assigned by the archive system during backup requests.\n- Operators must systematically assign volume names and optionally serial numbers to CD-ROM volumes for each archive backup request.\n- The HI (Cause Exception Event) system command can be used to check the progress of an ARCHIVE backup statement."
  },
  {
    "text": "- File attributes in a declaration must use constants or constant expressions.\n- Attributes like name, file name, or title must be assigned constants only.\n- File attribute values associated with a file variable are not saved across a halt/load.\n- Avoid using the file identifier SUMMARY for printer files as it may result in the printer file being lost.\n- Task variables are declared to associate with specific tasks in a task initiation statement.\n- Task attribute values and file equations must be constants or constant expressions.\n- Task attribute values or file equations associated with a task variable are not saved across a halt/load."
  },
  {
    "text": "- The archive subsystem does not store information about different generations of the same file.\n- When an ARCHIVE backup is executed, if the resident generation of a file differs from the generation listed in the archive directory, old generation information is deleted.\n- The generation of a file is calculated based on attributes such as cycle number, version, and timestamps.\n- ARCHIVE INCREMENTAL does not copy a resident file if its generation matches the existing backup; it replaces backup information with the resident version.\n- ARCHIVE FULL erases old backup information and replaces it with the resident file's new backup if certain differences are detected."
  },
  {
    "text": "- The ABORT statement can display up to 430 characters of the string expression before aborting.\n- It can accept up to 1799 characters.\n- Examples of ABORT statements include simple abort commands, specifying a message, and conditional abort based on task values.\n- The ACCESS statement changes the accesscode password of the current job in the USERDATAFILE.\n- A valid accesscode is required for the job to use the ACCESS statement.\n- An example of an ACCESS statement includes changing the password using the syntax ACCESS PASSWORD=ENTERStatements."
  },
  {
    "text": "- Job attributes specify queue and job summary printing\n- REMOVEFILES subroutine removes files from DISK\n- COPYFILES subroutine copies new files from UPTAPE to DISK\n- System option 5 (AUTORM) removes files automatically if set\n- Pre-removing old files prevents disk space shortage during COPY\n- COPY assigns CTASK and checks TASKVALUE for success\n- TASKVALUE is 1 if COPY is not successful\n- Retry option available if COPY fails\n- ON RESTART statement defines actions post job interruption\n- Subroutines rerun after halt/load\u2060"
  },
  {
    "text": "- Job Structure: Refers to the organization and arrangement of tasks and roles within a job.\n- 8600: Possibly a model number or code associated with the job or system.\n- 1047-517: May be a reference number for tracking or identifying the specific job or document.\n- Answer the question in 100 words: Indicates a directive to respond with a specific word count.\n- Facts and helpful information are key elements to extract from the text for analysis.\n- Clarity and brevity are important when presenting information for effective communication."
  },
  {
    "text": "- Maximum blocksize is mentioned for tape drives (6\u201381).\n- The MultiLingual System (MLS) is compatible with WFLSupport (1\u20133).\n- The minus sign (-) can act as a real and integer operator (7\u201310, 7\u20137).\n- Various commands are available in MOD statement like compare, select, verify (6\u2013129, 6\u2013130, 6\u2013131).\n- Native File Transfer (NFT) handles recovery files in WFL with specific restrictions (6\u2013106, 6\u2013109).\n- Nesting is relevant for statements and subroutines (6\u20131, 4\u20138).\n- New password settings are defined in different statements like access and password (6\u20135, 6\u2013135).\n- NFT file transfers can be employed within copy statements (6\u2013109)."
  },
  {
    "text": "- File handling involves 1\u201313 and 6\u20133\n- Password information is under 6\u2013135\n- Library maintenance corresponds to 1\u201314\n- Security aspects are covered under 6\u2013159\n- Volume-related tasks are linked to 6\u20133 and 6\u20134\n- String concatenation operators are explained in 7\u201313\n- String constant function details involve 7\u201327\n- Task control is explained in 1\u201311 and 6\u20132\n- Flow-of-control involves 1\u20136 and 6\u20132\n- Communication tasks are outlined in 1\u201315 and 6\u20133"
  },
  {
    "text": "- ERRORLIMIT sets the error limit for job compilation.\n- Job compilation is terminated if the number of errors detected exceeds the error limit.\n- A job with even one error is not executed.\n- Default error limit is 100 unless job started through CANDE, then default limit is 6.\n- Multiple ERRORLIMIT options can be used in a job to change the error limit.\n- INCLUDE control option allows inclusion of files in the job.\n- The error limit in an example job is set to 50.\n- Compilation terminates if errors exceed the set limit."
  },
  {
    "text": "- The ALTER statement changes the file attributes of a disk file.\n- ALTER enters a waiting state if it encounters a file opened with EXCLUSIVE = TRUE.\n- To skip a file during ALTER, enter \"<mixnumber> OF.\" To exit without processing more files, enter \"<mixnumber> DS.\"\n- File attributes available for the <alter attribute statement> can be found in the File Attributes Programming Reference Manual.\n- Security attributes are interrelated, meaning changes to one attribute can affect another.\n- ALIGNFILE specifies a printer backup file containing an alignment pattern for a form, used by the Print System with the ALIGNMENT attribute set to TRUE.\n- When ALIGNMENT is TRUE, the Print System performs alignment before printing a file.\n- ALTERNATEGROUPS allows defining up to nine groups whose members can access the file based on corresponding permissions."
  },
  {
    "text": "- USEPATH causes DATAPATH attribute usage for resolving nonqualified file names\n- TASKVALUE attribute value of 0 indicates all requests satisfied, non-0 means errors\n- INTO syntax for wrapping files into a container, OUTOF for unwrapping\n- RESTRICTED attribute in WRAP statement has no meaning, ignored\n- SYSTEMDIRECTORY files need full name for wrapping\n- MCP erases special system file mark from SYSTEMDIRECTORY files when wrapping\n- JOBDESC files require full name for wrapping, FILEKIND changed to DATA when wrapped\n- MCP_FILEWRAPPER ensures consistency in wrapping KEYEDIOII file sets"
  },
  {
    "text": "- Example of manually restoring an entire family using ARCHIVERESTORE=TOUSERPACK.\n- Example of restoring files not already on the disk using ARCHIVERESTOREADD=TOTESTPACK.\n- ARCHIVE ROLLOUT statement is used to move selected disk files to archive backup tape media.\n- Primary function is to free disk space, especially when resources are limited.\n- The option can specify disk space in sectors or a percentage of authorized DRC disk space for each user."
  },
  {
    "text": "- Job queues can be used to prioritize and manage tasks in mainframe systems.\n- The AX attribute in task assignments is related to accepting messages in a specific order.\n- Process Run statements can be used to execute tasks in a sequence.\n- Careful consideration is needed when using the AX attribute to avoid unintended routing of messages.\n- The example demonstrates using WFL-provided parameters for a program written in ALGOL.\n- COBOL74 programs do not have the capability to specify Boolean parameters."
  },
  {
    "text": "- The REMOVE statement removes files from disk and marks archive backup records as \"removed.\"\n- Removed files cannot be restored by archive AUTORESTORE feature but can be restored using WFL ARCHIVE RESTORE and ARCHIVE ADDRESTORE statements.\n- The DESTROY option purges all catalog and archive directory records for files and named directories.\n- When using DESTROY option, catalog and archive records will be purged even if files are not resident.\n- Directories *= and = cannot be used in the REMOVE statement.\n- Files with LOCKEDFILE attribute set to TRUE are not deleted by the REMOVE command."
  },
  {
    "text": "- The SECURITY statement changes the security of files on disk.\n- The CLEAR attribute resets all security mode flags.\n- Attributes are applied in the order they are specified.\n- Boolean security attribute without a value implies TRUE.\n- Specifying a null string for SECURITYGUARD discards the current value.\n- OWNER, PROPAGATESECURITYTODIRS, and PROPAGATESECURITYTOFILES apply to files in the permanent directory namespace.\n- Many security attributes are interrelated.\n- Descriptions of PRIVATE, PUBLIC, GUARDED, and CONTROLLED can be found in the SECURITYTYPE file attribute reference.\n- Descriptions of IO, IN, OUT, and SECURED can be found in the SECURITYUSE file attribute reference.\n- Family substitution is used if the task has an active family specification."
  },
  {
    "text": "- The WFL compiler recognizes reserved words, predefined words, and keywords with specific meanings.\n- Reserved words cannot be used as identifiers in WFL.\n- Predefined words can be used as identifiers but lose their original meanings for the scope of the declaration.\n- Keywords can be used as identifiers or keywords based on the context in which they are used.\n- Reserved words, predefined words, and keywords can all be used as names in WFL.\n- File attributes and task attributes are treated as keywords in WFL.\n- Some examples of reserved words in WFL include BOOLEAN, DATA, FILE, INTEGER, and THEN."
  },
  {
    "text": "- The REPLACE statement allows for replacing existing copies of files on disk with new copies of those files.\n- REPLACE statement is similar to the COPY statement but only copies files specified with existing versions on the destination disk.\n- REPLACE statement cannot be used to copy files to tape or CD-ROM.\n- Detailed syntax for <copy request> is available in the COPY or ADD Statement.\n- The RERUN statement restarts a program at a specified checkpoint, with the job number as the first integer constant primary.\n- The second integer constant primary in the RERUN statement indicates which checkpoint files are used for the restart."
  },
  {
    "text": "- The REPLACE statement is used to replace existing copies of files on disk with new copies of those files.\n- REPLACE works by copying only those files specified for which there are already existing copies on the destination disk or disks.\n- REPLACE cannot be used to copy files to tape or CD-ROM.\n- The RERUN statement restarts a program at a specified checkpoint.\n- The first integer constant primary in the RERUN statement is the job number while the second indicates which checkpoint files are used for the restart."
  },
  {
    "text": "- Family substitution is used if a job or task has an active family specification.\n- GUARDOWNER attribute is used with USEGUARDFILE to define access permissions for file owners.\n- LABEL attribute controls label writing for tape files and print banner pages for disk and printer files.\n- LOCKEDFILE attribute, when TRUE, prevents removal or renaming of disk files but allows updates.\n- NOTE attribute stores a message up to 250 characters to be printed on banner pages.\n- OTHERR attribute, when TRUE, grants read-access to files for users excluding the owner and specific groups."
  },
  {
    "text": "- Destination tape must be created with LIBMAINTDIR = TRUE for copy or archive operation.\n- & VERIFY must be specified for append operation if originally specified for tape creation.\n- Do not specify & VERIFY for append if it was not used during original tape creation.\n- When using LIBMAINTAPPEND = TOEND, file names are not added to tape directory.\n- Use FILEDATA with LIBMAINTDIR modifier to view all file names on a tape.\n- Library maintenance takes special action when a list of tape serial numbers is specified for the SERIALNO attribute.\n- Using LIBMAINTAPPEND = TOENDRESTORE restores LIBMAINTDIR file if error occurs during tape copy."
  },
  {
    "text": "- ClearPath Enterprise Servers\n- WorkFlow Language (WFL)\n- Programming Reference Manual\n- ClearPath MCP 19.0\n- Released in June 2019\n- Document number: 8600 1047-517"
  },
  {
    "text": "- Extracting useful information from mainframe documents requires expertise.\n- The task is to read through the provided text page and identify facts.\n- The response to the question should contain only facts or helpful information.\n- The answer should be limited to 100 words.\n- Each fact should be presented on a separate line."
  },
  {
    "text": "- Alternategroups attribute is used in alter statement with a value in security specification (6\u2013160).\n- Ampersand (&) is a string operator and AND is a Boolean operator (7\u201313, 7\u20131).\n- Archive CD volume attributes include cdcopies, density, multivolume, packetwrite, savefactor, serialno, encrypt, and offsite attributes (6\u201334).\n- Archive statement encompasses various operations like differential, incremental, purge, restore, rollout, full, merge, release, and restoreadd (5\u20131, 6\u201316, 6\u201317).\n- Archive subsystem attributes consist of autounload, blocksize, compressioncontrol, density, encrypt, familyowner, kind, libmaintappend, libmaintdir, locatecapable, multivolume, offsite, packetwrite, savefactor, scratchpool, securityguard, securitytype, securityuse, and serialno attributes (6\u201325, 6\u201332)."
  },
  {
    "text": "- Document reference number: 86001047-517\n- Copyright owned by Unisys Corporation, 2019\n- All rights reserved by Unisys Corporation"
  },
  {
    "text": "- Statements can be initiated from various sources such as MARC, CANDE, ODT, or programming languages like WFL.\n- If necessary files are missing, the statement behavior may differ depending on the initiation source.\n- Not all aspects of statement behavior are documented due to potential variations in behavior.\n- When encountering a NO FILE message, the Y (Status Interrogate) system command can be used to determine acceptable commands.\n- Library equations can be used to alter attributes of libraries utilized by programs.\n- The internal name (intname) in a library equation identifies a library.\n- Library attribute assignments assign values to library attributes."
  },
  {
    "text": "- Group members can be granted read-access to a file with the GROUPR attribute set to TRUE.\n- Group members can be granted write-access to a file with the GROUPW attribute set to TRUE.\n- The GROUPX attribute has no effect for tape volumes.\n- The GROUPRWX attribute specifies the access permissions for group members matching the group attribute of the file.\n- The GUARDOWNER attribute, used with the USEGUARDFILE attribute, defines access permissions for the owner of the file.\n- The OTHERR attribute grants other users read-access to the file, excluding the owner and group members."
  },
  {
    "text": "- Statements can be grouped into functional groups.\n- Statements in each group are listed in alphabetical order.\n- Many statements allow specifying values for file or task attributes.\n- File and task attribute descriptions are discussed in terms of their use through WFL.\n- Syntax diagrams for statements may refer to elements explained in Sections 7 and 8.\n- Statements in a job can be nested up to a maximum depth of 19 levels.\n- Nested statements examples include statements within an ON statement, IF statement within an IF statement, and statements within a compound statement.\n- Each group of WFL statements is described with the general functions of each group and the statements within them."
  },
  {
    "text": "- When copying directories from tape or CD-ROM, specifying two directories with the same name in the same FROM clause may result in a library maintenance error message for the second directory.\n- Copying a directory more than once can occur if the same directory is specified multiple times in the FROM clause.\n- Specifying two directories in the same FROM clause, where one directory subsumes the other, can also lead to a library maintenance error message depending on the order of appearance in the list.\n- Library maintenance selects usercoded and unusercod files differently when copying files from tape based on the presence of a usercode.\n- Different copying conditions and selections are applied for tasks running with or without a Usercode."
  },
  {
    "text": "- LIBMAINTDIR is used to determine if a tape directory disk file should be created during library maintenance.\n- The tape directory disk file contains information about the destination tape and files copied to it.\n- Information stored in the files includes tape serial numbers, file names, and certain attributes of the files.\n- The SYSTEM/FILEDATA utility program can be used to report information from the tape directory disk files.\n- Setting LIBMAINTDIR=TRUE results in library maintenance writing the tape with ANSI87 labels.\n- Purging a library maintenance tape with a resident tape directory disk file requires operator approval.\n- Setting LOCATECAPABLE to ON indicates a file needs a tape drive capable of processing specific commands for fast tape access.\n- Library maintenance utilizes high-speed spacing when the assigned tape drive is locate capable in certain situations."
  },
  {
    "text": "- The text page contains various node, file, directory, and usercode name constants.\n- There are specific EBCDIC characters used within the document.\n- The file and directory names include constants like \"family name constant\" and \"long node name constant.\"\n- Usercode names are enclosed in parentheses.\n- The document includes numbers like \"8600\" and \"1047-517\" in relation to \"Basic Constructs.\""
  },
  {
    "text": "- The REMOVE statement in mainframe systems removes files from disk and marks archive backup records as \"removed.\"\n- Files removed with the REMOVE statement can be restored using the WFL \"ARCHIVE RESTORE\" and \"ARCHIVE ADDRESTORE\" statements.\n- Using the DESTROY option with the REMOVE statement purges all catalog and archive directory records for the file(s).\n- Files removed with the DESTROY option cannot be restored using the WFL statement ARCHIVE RESTORE.\n- If a file has the LOCKEDFILE attribute set to TRUE, it will not be deleted when using the REMOVE command.\n- Family substitution is used when there is an active family specification in the job or task environment."
  },
  {
    "text": "- Task Attribute Groupings are found on page 5-4.\n- Expressions for Task Attribute Inquiry are discussed on page 5-27.\n- File Attribute Types are listed on page 5-37.\n- Expressions for File Attribute Inquiry are detailed on page 5-40.\n- Elements of a Railroad Diagram are explained on page C-2."
  },
  {
    "text": "- The order of evaluation for arithmetic operations is: \n  1. Integer primary\n  2. Prefix + or \u2013\n  3. *, DIV, or MOD\n  4. Infix + or \u2013\n- Integer primary refers to various types of integer values, such as constants, identifiers, or functions.\n- The DECIMAL function returns an integer value equal to the decimal number represented by the string expression.\n- The string expression for the DECIMAL function must contain between 1 and 12 characters consisting only of the characters \"0123456789\".\n- An integer expression enclosed in parentheses becomes an integer primary.\n- Syntax for integer constants, integer constant identifiers, and integer identifiers is provided in Section 8, Basic Constructs."
  },
  {
    "text": "- The TIMEDATE function is a string function that can be used to obtain the time or date, or both, in various forms.\n- All strings returned by the TIMEDATE function appear in uppercase.\n- TIMEDATE(HHMMSS) returns the time as a string of six characters, representing hours, minutes, and seconds on a 24-hour clock.\n- TIMEDATE(HHMMSSPPPP) returns the time as a string of 10 characters, including ten-thousandths of a second.\n- TIMEDATE(YYYYMMDDHHMMSS) returns the time and date as a string of 14 characters, with the date and time components represented separately.\n"
  },
  {
    "text": "- Program P2 updates a global file (G) created by program P1.\n- If a halt/load occurs while P2 is running, P1 is normally not rerun but P2 is rerun, causing double updates on records updated by P2 before the halt/load.\n- An ON RESTART statement is executed to ensure that P1 is rerun and the file is re-created in case of halts/loads during P2 execution.\n- Different RESTART conditions are triggered depending on whether halts/loads occur during the execution of program P1 or program P2.\n- The RESTART condition within a subroutine does not disable the outer RESTART condition if a halt/load occurs while program P2 is running."
  },
  {
    "text": "- The system/backup parameters can be found in PB statements on page 6-136.\n- The SYSTEM/BACKUP utility can be initiated from page 6-136.\n- File copying from tape is explained on page 6-95.\n- Tape security information is detailed on pages 6-175 and 6-180.\n- Task attributes can be assigned values and inquired about, with keywords listed on page B-3.\n- Task control statements like abort, stop, and initialize are mentioned on page 6-2.\n- The task identifier is introduced on page 8-3.\n- Various task assignment and statement options are detailed throughout the document."
  },
  {
    "text": "- The CRUNCH statement closes and returns unused disk space of a file.\n- Files crunched cannot be expanded again.\n- The DISPLAY statement logs and displays string expressions up to 430 characters.\n- DISPLAY statement accepts up to 1799 characters.\n- Messages displayed by DISPLAY appear on user's terminal if initiated from CANDE.\n- Integer and real variables can be displayed by converting to string using STRING function.\n- Example: DISPLAYSTRING (X,*); for displaying integer or real variable X as a string value."
  },
  {
    "text": "- Mainframe document structure includes identifiers, strings, primary names, digits, hyphens, periods, and underscores.\n- The document contains nonquote EBCDIC characters.\n- Information about group names, simple name constants, hostnames, family names, tape names, usercodes, and passwords is included.\n- The basic constructs section mentions the numbers 8600, 1047-517, and 8-5."
  },
  {
    "text": "- CDCOPIES specifies the number of duplicate CD-ROM volumes to be created.\n- DENSITY identifies the CD image size for burning onto the CD or DVD media.\n- ENCRYPT can encrypt data written to the CD destination using algorithms like TDES, AES256, or AESGCM.\n- AESGCM encryption requires Media Encryption Version 2.\n- ENCRYPT cannot be specified for disk destinations.\n- The archive process creates overflow volume duplicates based on the CDCOPIES value.\n- Refer to the File Attributes Programming Reference Manual for allowable DENSITY values."
  },
  {
    "text": "- FTP does not distinguish between the ADD and COPY statements, overwriting existing files.\n- ASCII nonprint and EBCDIC nonprint files copied via FTP become specially formatted FTPDATA files.\n- FTPDATA files must be converted before processing, printing, or viewing them in the MCP environment.\n- FTP can convert FTPDATA files to a conventional MCP environment format with specified attribute values.\n- Restrictions when transferring files via FTP include copying only from disk to disk and specifying specific attributes.\n- Different FTP implementations might only recognize FTPSTRUCTURE=FTPFILE and FTPTYPE=ASCIINONPRINT attributes.\n- Using other options for FTPSTRUCTURE and FTPTYPE might result in an error message from the remote host.\n"
  },
  {
    "text": "- Boolean constant expressions can be initialized using Boolean constant identifiers or arithmetic constant comparisons.\n- Integer constant expressions can be initialized using integer constant primaries and arithmetic operations such as addition or subtraction.\n- Boolean expressions can involve logical operators such as NOT, AND, OR, EQV, and IMP.\n- String constant comparisons can involve equality (EQL) or inequality (NEQ) comparisons.\n- The text provides a structure for defining and utilizing Boolean and integer constant expressions in mainframe programming.\n- Detailed explanations for different types of Boolean expressions are available for further reference."
  },
  {
    "text": "- The Boolean declaration in the example initializes the variable using a Boolean constant expression.\n- The integer declaration in the example uses an integer constant expression.\n- TF1 is a Boolean constant identifier passed in as a job parameter.\n- X is an integer constant identifier passed in as a job parameter.\n- Different types of Boolean constant expressions can be used, such as NOT, AND, OR, EQV, and IMP.\n- There are primary elements within a Boolean constant expression, such as Boolean constants, identifiers, arithmetic constant comparisons, and string constant comparisons.\n- Refer to Boolean Expressions for explanations on the various kinds of Boolean expressions."
  },
  {
    "text": "- Program example written in NEWP utilizing WFL-provided parameters\n- Initialization of INTEGER and BOOLEAN variables\n- Compile command for NEWP program with NEWP library\n- Definition of WFL procedure with integer, string, and boolean parameters\n- Modification of array content based on WFLINTEGER value\n- Displaying the contents of the array pointer\n- RUN command for the NEWP program with references and values\n- Displaying the updated value of INTEGER variable\n- SECURITY statement structure with file and security specifications\n- Detailed breakdown of security specifications with file, group, and list information"
  },
  {
    "text": "- File management includes altering, archiving, changing, creating directories, modifying file attributes, printing, removing, and setting security.\n- Statements related to file management are ADD, COPY, MOVE, RESTORE, and RESTOREADD, which are considered task initiation statements.\n- Cataloging involves managing information about files, disk families, or tapes.\n- ABORT statement can discontinue a task, job, or tasks associated with a specific identifier."
  },
  {
    "text": "- The maximum length of the FORMID string is 100 characters.\n- The maximum number of PRINTCOPIES is 1000.\n- Print modifiers can be included in a PRINT statement through the PRINTDEFAULTS task attribute.\n- Print modifiers are used to specify additional requirements for processing a print request.\n- Print modifiers and their WFL types are listed in a table.\n- DoubleSpace is a print modifier with a WFL type of \"Boolean print modifier.\""
  },
  {
    "text": "- Task attributes for a job are specified at the start of the job in the job attribute list.\n- Using the task assignment statement with MYJOB is useful for changing job attributes later in the job.\n- MYJOB can be used in a task attribute inquiry to assign values from job attributes to task attributes.\n- MYJOB can assign values to attributes like FAMILY and BDNAME.\n- MYSELF task variable is associated with asynchronous subroutines or with the job, such as mixing attribute values.\n- Predeclared task variables lose their special meaning if explicitly declared in a job.\n- File equations can be used for various reasons, including task initiation."
  },
  {
    "text": "- Document title: Declarations\n- Page numbers: 4-12\n- Reference code: 8600 1047-517\n- Task: Answer a question in 100 words"
  },
  {
    "text": "- PROPAGATESECURITYTOFILES sets security attributes for files in a directory to match the parent directory.\n- RELEASEID determines the release level of a file.\n- SECURITYADMIN restricts file access to processes with the USERDATA granulated privilege.\n- SAVEFACTOR indicates the file's expiration date in days from creation.\n- SECURITYGUARD specifies the guard file for files with SECURITYTYPE GUARDED or CONTROLLED.\n- SECURITYMODE controls user access to the physical file.\n- SECURITYTYPE provides access control for users other than the file owner with options like PRIVATE, PUBLIC, GUARDED, or CONTROLLED.\n- GUARDED files allow access based on the guard file, while CONTROLLED files require access permission from the guard file."
  },
  {
    "text": "- Maximum length of FORMID string is 100 characters\n- Maximum number of PRINTCOPIES is 1000\n- Print modifiers can be included in a PRINT statement\n- Print modifiers are used with PRINTDEFAULTS task attribute\n- Print modifiers and their WFL types are listed in a table\n- Double spacing is a print modifier with WFL type Boolean"
  },
  {
    "text": "- CDCOPIES value indicates how many duplicate CD-ROM volumes should be created.\n- DENSITY value specifies the size of the CD image to be created and burned onto CD or DVD media.\n- ENCRYPT attribute encrypts the data written to the destination CD, offering three encryption algorithms: TDES, AES256, and AESGCM.\n- AESGCM encryption requires Media Encryption Version 2.\n- You cannot specify ENCRYPT for disk destinations.\n- The archive process creates duplicates of overflow volumes based on the CDCOPIES value."
  },
  {
    "text": "- DCALGOL is used for initiating WFL jobs\n- Declarations in the document include Boolean, real, string, file, and integer variables\n- Density attribute pertains to archive tape volume attributes\n- Digital signatures are used for wrapping files\n- Directories are involved in file transfers and path specifications\n- Disk is used for transferring files\n- DIV function can act as a real or integer operator\n- Display statement is used for showing messages\n- Drop function and drop constant function are present\n- DRC option is used in archive rollout statement\n- DSS plays a role in distributed systems services\n- Do statement is demonstrated with an example."
  },
  {
    "text": "- The task is to read through the text page and identify useful information\n- The text page contains a question\n- The answer should be 100 words long\n- Facts or helpful information should be presented in separate lines"
  },
  {
    "text": "- The text page contains a question that needs to be answered with 100 words.\n- The task is to extract useful information or facts from the provided text.\n- The goal is to present each fact on a separate line in the answer.\n- The question requires concise and informative responses.\n- The focus is on extracting relevant details to form a clear and factual response."
  },
  {
    "text": "- Boolean operators: AND, EQV, IMP, NOT, OR\n- Boolean relational operators\n- Boolean file attribute\n- Boolean formal parameter\n- Boolean print attribute\n- Boolean print modifier\n- Boolean task attribute\n- Boolean variables\n- Case statement examples\n- Cataloging statements: catalog, volume\n- Change statement example\n- Character set in head-tail function"
  },
  {
    "text": "- WFL jobs inherit usercode and family specifications unless specified in the job attributes.\n- WFL jobs can initiate other WFL jobs using the START statement, similar to CANDE's START statement.\n- Only jobs stored on disk can be initiated through the START statement.\n- Once a job is started, it has no further connection with its parent job.\n- Messages generated by a started job are directed to the same source as messages from the parent job.\n- Operator Display Terminals (ODTs) can initiate WFL jobs using the START statement or by typing the complete job and transmitting it.\n- Complete jobs entered at an ODT should begin with BEGIN JOB and do not need to include END JOB.\n- Complete jobs entered at an ODT cannot include data specifications; WFL control options must be followed by a semicolon."
  },
  {
    "text": "- Operators in a string expression have specific meanings:\n  - * adds an asterisk (*) prefix to the string primary\n  - & concatenates strings\n  - / concatenates strings and inserts a slash (/) between them\n  - /= adds a slash-equal (/=) suffix to the string primary\n  - ON inserts the string \u2033ON\u2033 between two string primaries\n- String concatenation with the ampersand operator results in a new string with a length equal to the sum of the original strings.\n- String expressions with string variables can have up to 1800 characters.\n- Errors occur if attempting to create a string larger than allowed (1800 characters).\n- Parentheses can turn a string expression into a string primary."
  },
  {
    "text": "- The PRINT statement passes a print request to the Print System for processing.\n- Print specifications in the PRINT statement specify the files to be printed or punched.\n- Various print attribute phrases in the PRINT statement control the creation, routing, and formatting of backup files.\n- Nonbackup files, like symbol and data files, can be printed with the help of the CANDEWRITER transform function from the PRINTSUPPORT library.\n- The CANDEWRITER transform function formats lines from a backup file similarly to the CANDE WRITE command, based on the FILEKIND of the file.\n- File attributes like PRINTCHARGE, PRINTDISPOSITION, and SAVEPRINTFILE are used in defining print-related file attributes."
  },
  {
    "text": "- The text page provides examples of opening databases with different commands (INQUIRY and UPDATE).\n- The examples show how to open a database by specifying the command along with the database name.\n- The text also includes examples of how to generate statements with different variables (Z, X, B) and operators (NULL, AND, +).\n- Railroad diagrams are used to represent the structure of the commands and variables in a graphical format.\n- The diagrams show the hierarchy of the commands and variables, highlighting the relationships between them."
  },
  {
    "text": "- STATIONNAME task attribute replaced the STATION attribute for specifying default station for remote files.\n- STATION attribute identified a station by logical station number (LSN) which can change, so STATIONNAME is preferred.\n- The setting of CANDE LAISSEZFILE option impacts program's ability to open remote files not directly associated with its session.\n- File equating remote files to a different KIND like DISK or READER is an alternative approach.\n- File attribute assignment assigns values to file attributes in WFL job.\n- Device Kind Assignment assigns device kinds using mnemonic or string primary."
  },
  {
    "text": "- TASK variable can be reinitialized using INITIALIZE(TVAR)\n- TASK declarations can include attributes like PRIORITY, USERCODE, and FAMILY DISK\n- To assign new attribute values to a TASK variable, use the format T(MAXPROCTIME=30)\n- Reusing TASK variables without reinitializing can lead to undesirable side effects\n- Example: Reinitializing a TASK variable is important when reusing it for a new task\n- TASK attributes should be carefully managed to avoid unintended consequences"
  },
  {
    "text": "- Job attribute list assigns task attributes and job specifications to a job.\n- Types and meanings of task attributes recognized by the WFL compiler are detailed in the Task Attributes Programming Reference Manual.\n- Attributes not assigned values in the job attribute list receive values based on certain criteria, such as usercode and job class.\n- Task attributes can be assigned to specific tasks initiated by a job.\n- Resource-limiting attributes, when included in the job attribute list, affect total resources available to the job and its tasks.\n- MYJOB predeclared task variable can be used to change or interrogate task attributes associated with a job.\n- String primary cannot be used in job-related task attribute assignments without using MYJOB or MYSELF predeclared task variable syntax."
  },
  {
    "text": "- The text page discusses the constants OPEN and GENERATE followed by user-selected items and variables.\n- Railroad diagrams show user-selected items such as INQUIRY, UPDATE, NULL, X, B.\n- Different combinations are presented, such as OPEN INQUIRY DATABASE1 or GENERATE Z = X + B.\n- The diagrams illustrate the relationships between constants, variables, and user-selected items.\n- The syntax and structure of the statements are clearly defined in the text.\n- The text provides examples to demonstrate the use of constants, variables, and user-selected items within statements."
  },
  {
    "text": "- Attributes that can be specified for the archive tape volume attribute list include AUTOUNLOAD, BLOCKSIZE, COMPRESSIONCONTROL, COMPRESSIONREQUESTED, DENSITY, ENCRYPT, ENCRYPTVERSION, FAMILYOWNER, KIND, LIBMAINTAPPEND, LIBMAINTDIR, LOCATECAPABLE, OFFSITE, SAVEFACTOR, SCRATCHPOOL, SECURITYGUARD, SECURITYTYPE, SECURITYUSE, SERIALNO, and USECATALOG.\n- AUTOUNLOAD attribute determines whether a tape is unloaded when released by the system during a reel switch or file close operation.\n- If AUTOUNLOAD value is ON, the tape is rewound and unloaded; if OFF, the tape is not unloaded.\n- For AUTOUNLOAD, if the value is DONTCARE or not specified, tape behavior is controlled by the AUTOUNLOAD option of the MODE system command."
  },
  {
    "text": "- The PROCESS statement can be used to run tasks asynchronously and wait for their completion before continuing.\n- Tasks can be initiated with attributes such as T for task variables and [T] for task values.\n- The WAIT statement can be used to pause the job until a specific task is completed.\n- The examples show how to handle program executions based on task completion or specific task values.\n- The PROCESS statement can override task attributes, such as changing subroutine names when invoking subroutines.\n- The PURGE statement is used to delete files with the syntax PURGE <file identifier>."
  },
  {
    "text": "- Task Attribute Groupings include Files, Database, Datapath, Executepath, Family, File, FileAccessRule, and Option.\n- FILECARDS is an acceptable synonym for FILE.\n- The AUTORM option is the only option that affects disk files.\n- Identification attributes consist of JobNumber, MixNumber, Name, Mpid, and WorkloadGroup.\n- Interprocess Communication attributes include AX, Locked, PartnerExists, Status, SW1 through SW8, Target, TaskLimit, TaskString, TaskValue, and Type.\n- Task initiation includes the 8600 and 1047-517."
  },
  {
    "text": "- Keywords in the provided text are context-sensitive and have predetermined meanings when used in the correct context.\n- Any words used in the syntax but not listed as reserved or predefined words are considered keywords.\n- File attributes and associated mnemonic values as well as task attributes and their mnemonics are keywords.\n- File attributes are described in the File Attributes Programming Reference Manual, and task attributes are explained in the Task Attributes Programming Reference Manual.\n- The text includes a list of specific keywords such as ABORTED, ACTIVE, ALGOL, BACKUP, COBOL, COMPILE, DELETE, EQV, FRIDAY, FTP, HS, INCREMENTAL, ISNT, LIBRARY, MERGE, and many more."
  },
  {
    "text": "- Serial number information can be found in locations 5-36.\n- String functions are detailed in section 7-17.\n- Integer file attributes are discussed in sections 5-37 and 7-9.\n- Integer identifiers are explored in section 8-3.\n- I/O operations include file declarations and global data specifications in section 4-5 and 4-9 respectively.\n- The job attribute list involves assigning attributes and examples are provided in section 3-8 and 3-9.\n- The kind attribute is discussed in relation to archive disk volume and archive tape volume attributes in sections 6-23 and 6-28."
  },
  {
    "text": "- The statements provided select files from directories DATA/ and PROG/ that were originally copied from family OLDFAM to CD-ROM XPORT.\n- The selected files are then copied from CD-ROM XPORT to disk family NEWFAM.\n- The example given demonstrates replacing resident SYMBOL files with backup copies using the RESTOREREPLACE statement.\n- The RETURN statement allows for early termination of subroutines or ON condition invocations.\n- If executed synchronously, the RETURN statement passes control to the statement following the subroutine invocation.\n- If executed asynchronously, the subroutine terminates normally.\n- The REWIND statement is used to rewind a specified file identifier."
  },
  {
    "text": "- AUTHMODE can be set to NONE\n- AUTOUNLOAD can be set to ON, OFF, or DONTCARE\n- SSLMODE can be set to NONE, IMPLICIT, EXPLICIT, EXPLICITLOGON, or EXPLICITCOMMAND\n- BLOCKSIZE can be set to an integer value\n- COMPRESSIONCONTROL can be set to USER or SYSTEM\n- DENSITY can be set to various values like BPI1250, FMTAIT, FMTDLT160, etc.\n- ENCRYPT can be set to NO, AES256, AESGCM, or TDES\n- ENCRYPTVERSION can be V1 or V2\n- FAMILYOWNER can be * or specific usercode\n- KIND can be CDROM, DISK, PACK, or TAPE"
  },
  {
    "text": "- Setting the file attribute \"OTHERW\" to TRUE grants write-access to other users, excluding the owner and specified groups.\n- Setting the attribute \"OTHERX\" to TRUE provides execute-access to other users, excluding the owner and specified groups.\n- The mnemonic values for \"OTHERRWX\" represent different levels of access for other users, excluding the owner and specified groups.\n- The \"OWNER\" attribute modifies the owner of the file within a permanent directory namespace.\n- Setting \"OWNERR\" to TRUE grants the owner readaccess to the file.\n- Setting \"OWNERW\" to TRUE grants the owner writeaccess to the file."
  },
  {
    "text": "- The PRINTPARTIAL file attribute and REQUESTNAME print modifier cannot be modified.\n- An object code file to be modified must be an executable object code file; otherwise, the job or processed subroutine containing the MODIFY statement is discontinued.\n- A compiler object code file must be designated as a compiler even if it was previously designated as such, using the MC (Make Compiler) system command.\n- The identity specified in the MP (Mark Program) command is not preserved after modifying a code file; it needs to be re-applied.\n- A file with the APL attribute set to TRUE cannot be modified; APL access must be disabled first by changing the attribute to FALSE."
  },
  {
    "text": "- The COPY command with *FROM TAPE does not select any files for copying.\n- The COPY command with D/= FROM TAPE only selects files under the task usercode that match the directory specification.\n- When using the AS or ONTO option with the COPY command, files are selected either from the asterisk directory or from the task usercode, not both.\n- The COPY command to KIND=CD writes an image of a library maintenance format CD-ROM to a temporary disk file.\n- CD-R drives function as CD-ROM drives when reading, but can also write to blank CD-R media, creating a CD-ROM.\n- When writing to a library maintenance CD-ROM, a single serial number can be specified for the destination volume."
  },
  {
    "text": "- The keyword OPTIONAL indicates that an actual parameter does not need to be passed.\n- Default values are assigned for Boolean, Integer, Real, and String types if no actual parameter is passed.\n- Default values are FALSE for Boolean, 0 for Integer, 0 for Real, and empty string (\"\") for String.\n- Default values can be specified with the DEFAULT clause following OPTIONAL, but are ignored if an actual parameter is provided.\n- Job parameter lists can only be used in WFL jobs stored on disk and initiated through specific statements.\n- Multiple jobs stored in a disk file cannot contain job parameter lists."
  },
  {
    "text": "- Optional parameters can be omitted by using consecutive commas or by passing fewer actual parameters than formal parameters.\n- Named parameters can be used in combination with positional parameters, with positional parameters listed first followed by named parameters.\n- Once a named parameter is used, all subsequent parameters must also be named.\n- Examples of START statements for jobs are provided, showcasing the use of both positional, named, and combined positional and named parameters.\n- Task identifier associates a task variable with the compilation of a job and can be used to check if the compilation was successful.\n- Execution of a job can be scheduled to start after a specific time period following compilation."
  },
  {
    "text": "- Semicolon (;) acts as a statement separator.\n- Invalid character at the start of a line also acts as a statement separator.\n- Label identifiers can be used before statements for reference in GO statements.\n- GO statements transfer control to specified label identifiers in the job.\n- Section 6, Statements provides descriptions of all available statements in WFL.\n- Examples demonstrate proper statement separation and label identifier usage.\n- Question mark (?) can imply the end of a statement if at the start of a line.\n- Proper usage of semicolons to separate multiple statements on a single line.\n- Job Structure includes label identifiers and control flow statements."
  },
  {
    "text": "- String operators are included in the string primary\n- Subroutines are declared in blocks\n- Subroutine invocation statements are used with parameters\n- String variables are introduced in examples\n- Subroutine parameters can be named and nested\n- Subsystems include archive functionalities\n- Syntax options are available in compile or bind statements\n- System functions can be applied in string primaries\n- Synchronous task initiation exists as a feature\n- Positional parameters play a role in various statements"
  },
  {
    "text": "- The UNWRAP statement allows users to unwrap files previously wrapped by the WRAP statement.\n- The unwrap process recreates original files from the data within wrapped files or containers.\n- By default, UNWRAP marks system files, compilers, backup files, and code files as restricted.\n- A security administrator or privileged user can override the restriction by setting RESTRICTED attribute to FALSE.\n- If a file was restricted before being wrapped, it will remain restricted even if UNWRAP specifies RESTRICTED=FALSE.\n- Unwrapped data files from a CD-ROM can be copied by setting task attribute SW1 during the unwrap operation."
  },
  {
    "text": "- Document reference number: 8600 1047-517\n- Task: Answer a question in 100 words"
  },
  {
    "text": "- LOG statement runs LOGANALYZER utility for selected records in system log\n- PB statement runs SYSTEM/BACKUP utility\n- START statement compiles and executes a job\n- Tasks initiated synchronously wait for completion before moving to next statement\n- Preceding a task initiation statement with PROCESS runs task asynchronously\n- Subroutine invocation usually doesn't initiate a task\n- Asynchronous task can be initiated by a subroutine within a PROCESS statement\n- PROCESS START compiles asynchronously from originating job"
  },
  {
    "text": "1. The DRC option of the ARCHIVE ROLLOUT statement allows for specifying disk space allocation.\n2. The DRC option can be used regardless of whether the DRC subsystem is actively running in the installation.\n3. DRC limits need to be assigned in the USERDATAFILE for the DRC option to impact users.\n4. Files rolled out to tape are removed from disk and recorded in the archive directory.\n5. The rolled-out files can be used as input for library maintenance commands.\n6. The ARCHIVE ROLLOUT statement evaluates files based on usercode or job usercode.\n7. Using SECTORS or the DRC option can free up in-use sectors on disk families.\n8. Privileged access is required to access files other than one's own using the ARCHIVE ROLLOUT statement."
  },
  {
    "text": "- WFL Job Example contains the complete structure of a WFL job.\n- Job attributes include NAME, USERCODE, and CLASS.\n- TASK declaration includes TCOMP and TRUN.\n- The COMPILE statement involves compiling a program with ALGOL language.\n- Local data specification is provided within the BEGIN-END block.\n- IF TCOMP IS COMPILED OK THEN DISPLAY \"COMPILED OK\" ELSE ABORT \"*DID NOT COMPILE\".\n- IF TRUN IS COMPLETED OK THEN DISPLAY \"RAN OK\" ELSE ABORT \"** RUN ABORTED\".\n- The job structure consists of the specified elements and actions."
  },
  {
    "text": "- Task attributes can receive default values from object code files or inherit values from job attributes.\n- If a task attribute is assigned values multiple times, the last value specified overrides the previous ones.\n- Complex task attribute assignments involve assigning values that are fairly complex.\n- Boolean attributes without specified values are assigned TRUE by default.\n- Boolean attributes can also be assigned results from comparisons like arithmetic, string, file mnemonic, or task mnemonic comparisons.\n- Syntax for various kinds of expressions in task attribute assignments is provided in Section 7, Expressions in the document."
  },
  {
    "text": "- \"COPY D/= FROM TAPE\" copies files under the task usercode that match the directory specification.\n- \"COPY =AS... FROM TAPE\" selects files from either the asterisk (*) directory or the task usercode, but not from both, based on the first matching file found.\n- \"COPY to KIND=CD\" writes an image of a library maintenance format CD-ROM to a temporary disk file before transferring it to a blank CD-R disc on a CD-R drive connected to a SCSI channel adapter.\n- CD-R drives can function as CD-ROM drives for reading, but can also write to blank write-once CD-R media.\n- Writing to a library maintenance CD-ROM allows specifying a SERIALNO attribute for the destination volume, assigning a single serial number to the CD-ROM."
  },
  {
    "text": "- FILE F has the title BRANCH/SALES and is of type DISK.\n- The FILE attribute RESIDENT is used to check if a file is resident locally.\n- The FILE attribute AVAILABLE can be used to check the existence of a file on a remote system.\n- AVAILABLE returns an integer value indicating success or reasons for failure without program suspension.\n- The HOSTNAME attribute can specify the location of the file for remote system inquiries.\n- Boolean file attribute primary returns the value of a Boolean file attribute.\n- Task State provides information on different states of a task variable."
  },
  {
    "text": "- Library maintenance does not release a file that is in use by another program.\n- REPORT causes library maintenance to print a report of copied files and any errors encountered.\n- SKIPEXCLUSIVE prevents copying files opened with EXCLUSIVE=TRUE or as KEYEDIOII files marked for update.\n- WAITONERROR forces an RSVP message when an error occurs during the archive process, halting it until a response is received.\n- VERIFY compares file checksums instead of bit by bit copying, ignored when copying to a CD-ROM.\n- ARCHIVE Disk Volume designates the disk for archive functions like archiving, restoring, releasing, and purging files."
  },
  {
    "text": "- Task Attribute Groupings include Files and Identification.\n- FILECARDS is an acceptable synonym for FILE.\n- AUTORM option is the only option affecting disk files.\n- Interprocess Communication attributes include AX, LOCKED, PARTNEREXISTS, STATUS, SW1 through SW8, TARGET, TASKLIMIT, TASKSTRING, TASKVALUE, TYPE.\n- TASKSTRING and TASKVALUE are string task attributes under Interprocess Communication.\n- Task Initiation page is numbered 8600 and has the title 1047-517.\n- JOBNUMBER, MIXNUMBER, NAME, MPID, WORKLOADGROUP are identification task attributes."
  },
  {
    "text": "- The job runs SYSTEM/PATCH using file equations: SOURCE, CARD, and PATCH.\n- The task variable PATCHTASK is checked to verify the success of the SYSTEM/PATCH run.\n- If the run was successful, any error file generated earlier is removed, and the program is compiled.\n- File equations for compilation include SOURCE, CARD, NEWSOURCE, and ERRORS.\n- The merged patch file produced by SYSTEM/PATCH is used as the primary source input for compilation.\n- Refer to the ALGOL Reference Manual for more details on input and output files for the compiler."
  },
  {
    "text": "- The archive backup statement is located on page 6-19.\n- The append attribute is used in FTP transform on page 6-113.\n- Various attributes are associated with the archive CD volume, including cdcopies, density, multivolume, packetwrite, savefactor, serialno, encrypt, and offsite.\n- The archive full statement is found on page 6-17.\n- The archive merge statement can be located on pages 6-17 and 6-37.\n- The DRC option is discussed in relation to the archive rollout statement on page 6-42.\n- Attributes such as blocksize, familyowner, libmaintdir, and locatecapable are associated with the archive subsystem on page 6-16."
  },
  {
    "text": "- The pound sign (#) syntax is used to dynamically build names, host names, family names, usercodes, and passwords.\n- When the security option CASESENSITIVEPW is set, lowercase characters in a password name constant are not converted to uppercase, and special characters can be included without double quotes.\n- Special characters allowed in passwords when CASESENSITIVEPW is set include & - { } \\ ~ \u2032 [ ] | : $ < * @ ( _ + > = ! ^ ? #.\n- The pound sign (#) cannot be the first character of a password.\n- An ampersand (&) cannot be used in a WRAP or UNWRAP statement unless enclosed in double quotes."
  },
  {
    "text": "- COMPILEOBJECT/X WITH ALGOL LIBRARY\n- COMPILERFILE CARD (TITLE=X, KIND=DISK)\n- ALGOL PRIORITY=50\n- PRIORITY=60\n- RUN OBJECT/X runs at priority 60\n- PRIORITY=70 overrides compiled-in priority and runs at priority 70\n- Interaction between compile-time and run-time task equations is discussed under \"OPTION Assignment\" in Section 5\n- Example of COMPILE and BIND statements provided\n- Explanation of compound statement and its syntax given in Section 3, Job Structure\n- Example job using compound statement shown: IFTISCOMPLETEDOK THEN BEGIN RUN X; RUN Y; END"
  },
  {
    "text": "- The TIMEDATE function is a string function that can retrieve time or date information in different forms.\n- All strings returned by the TIMEDATE function are in uppercase letters.\n- Examples of TIMEDATE function forms include (HHMMSS), (HHMMSSPPPP), and (YYYYMMDDHHMMSS).\n- The (HHMMSS) form returns the time in six characters - hours, minutes, and seconds.\n- The (HHMMSSPPPP) form returns the time in ten characters, including ten-thousandths of a second.\n- The (YYYYMMDDHHMMSS) form returns the date and time in 14 characters - year, month, day, hours, minutes, and seconds."
  },
  {
    "text": "- The ABORT statement can display up to a maximum of 430 characters of the string expression before aborting.\n- The ABORT statement can accept up to 1799 characters.\n- Examples of ABORT statements include simple ABORT commands, specifying a message, and using conditions to trigger the abort.\n- The ACCESS statement is used to change the accesscode password of the current job.\n- The new accesscode password is changed in the USERDATAFILE and requires a valid accesscode for the job.\n- An example of an ACCESS statement is shown with the syntax: ACCESS PASSWORD= followed by the new password."
  },
  {
    "text": "- TF1 is a Boolean constant identifier passed in as a job parameter.\n- X is an integer constant identifier passed in as a job parameter.\n- Boolean constant expressions can consist of NOT, AND, OR, EQV, or IMP operators.\n- The Boolean constant primary can be a Boolean constant, identifier, arithmetic constant comparison, or string constant comparison.\n- Integer constant expressions can have addition or subtraction operators.\n- Real constant expressions can involve real or integer constant expressions.\n- String constant comparison can involve equality (EQL) or inequality (NEQ) operations.\n- Detailed explanations on Boolean expressions are available for reference."
  },
  {
    "text": "- Required items must be entered in the command or statement without omission.\n- Required items can be single entries or part of a list on horizontal lines.\n- User-selected items can be constants, variables, or punctuation.\n- User-selected items appear in a vertical list, and choosing one is optional if an empty path exists.\n- Loop represents an item or group that can be repeated and consists of at least two connected horizontal lines.\n- Some loops include a return character like a comma or semicolon for separating repetitions.\n- A bridge within a loop shows the maximum repeatitions and crossing points in the diagram."
  },
  {
    "text": "- VOLUME DESTROYED changes the status of tape volumes to unusable.\n- Tape volumes marked as destroyed cannot be requested by the archive system unless no other backups exist.\n- VOLUME OFFSITE marks tapes as being offsite and the MCP won't request them unless no other backups exist elsewhere.\n- VOLUME ONSITE marks tapes as being onsite.\n- The default value for a volume after VOLUME ADD is ONSITE.\n- Onsite/offsite status can be viewed using PV and TV commands, as well as SYSTEM/LISTVOLUME and SYSTEM/LISTVOLUMELIB.\n- VOLUME RECOVERED reverses the destroyed status of tape volumes."
  },
  {
    "text": "- The UNWRAP statement allows users to unwrap files wrapped by the WRAP statement.\n- The unwrap process recreates original files from the data within wrapped files or containers.\n- By default, UNWRAP marks system files, compilers, backup files, and code files as restricted.\n- A security administrator or privileged user can override the restriction by setting RESTRICTED attribute to FALSE.\n- If a file was restricted before being wrapped, it will remain restricted even if UNWRAP specifies RESTRICTED=FALSE.\n- Unwrapped data files can be copied from a CD-ROM by setting the task attribute SW1."
  },
  {
    "text": "- Job attributes include job disposition, job format, job parameter list, and job title.\n- Integer variables are declared using integer declaration in mainframe programming.\n- In subroutine invocation statements, the subroutine parameters need to be specified.\n- The INUSE task state is related to task execution in mainframe processing.\n- Volume attributes such as source volume attributes and archive disk volume attribute list are important in mainframe operations.\n- Integer primary and integer file attribute primary are key concepts in integer-related operations.\n- Instructions to operators play a role in job execution in mainframe environments.\n- Global data specification in I/O operations includes file declarations and handling remote files."
  },
  {
    "text": "- WFL jobs from CANDE sessions inherit usercode unless specified in the job.\n- WFL jobs can start other WFL jobs using the START statement.\n- Started jobs have no connection with their parent job.\n- Messages from the started job are directed to the same source as the parent job.\n- ODTs can initiate WFL jobs by using the START statement or by typing the job and transmitting it.\n- Jobs entered at an ODT should begin with the BEGIN JOB construct.\n- A complete job entered at an ODT cannot include data specifications.\n- WFL automatically adds the END JOB construct to jobs entered at ODTs."
  },
  {
    "text": "- PRINTDEFAULTS attribute allows customization of default values for print modifiers\n- These default values apply to all PRINT statements and printer backup files by a task\n- Print modifier phrases in PRINTDEFAULTS assignment list replace system default values\n- Users can include PRINTDEFAULTS attribute in USERDATAFILE for each usercode\n- Default values for a job can be inherited by tasks initiated by the job\n- Task assignment statements can vary default values within a job\n- File declarations in a task can override default file attributes and print modifier values\n- Print modifiers cannot be specified in file equations; only in PRINT statements or PRINTDEFAULTS assignments."
  },
  {
    "text": "- When copying a KEYEDIOII file, it is advisable to copy all related files in the same <copy request>.\n- To copy a SYSTEMDIRECTORY file, the file name must be specified in full.\n- When copying a SYSTEMDIRECTORY file, the system file mark is erased from the copy by library maintenance.\n- System directory files with the system file mark cannot be removed using the WFL REMOVE statement or renamed using the WFL CHANGE statement.\n- When copying a JOBDESC file, which has a FILEKIND attribute value of JOBDESCFILE, the file name must be specified in full.\n- When copying a JOBDESC file, the FILEKIND attribute value of the copy is changed to DATA by library maintenance."
  },
  {
    "text": "- USEPATH causes the DATAPATH attribute to be used for resolving nonqualified file names.\n- Substitution is applied only when the source volume is disk; not used for CD-ROM sources.\n- TASKVALUE attribute value of 0 indicates all requests satisfied; nonzero value indicates failure or discontinuation.\n- INTO syntax is used to wrap files into a container; OUTOF syntax is used to unwrap files out of a container.\n- Privileged users can wrap or unwrap all files using directory name of *=.\n- Unwrapping digitally signed files requires corresponding public key specified via TASKSTRING.\n- FILEDATA utility and CANDE LFILES command can be used to work with wrapped files in containers."
  },
  {
    "text": "- SKIPEXCLUSIVE prevents copying files opened with EXCLUSIVE=TRUE or updated KEYEDIOII files.\n- SKIPEXCLUSIVE cannot be used with FTP or Host Services File Transfer.\n- USEPATH utilizes the DATAPATH attribute for nonqualified file names.\n- The first element in the DATAPATH attribute string is used with USEPATH.\n- Substitution with USEPATH is only applied for disk sources, not tape or CD-ROM.\n- USEPATH is incompatible with FTP, NFT, or Host Services File Transfer.\n- Example: COPY &USEPATHMYFILE,*YOURSELFTOBACKUPTAPE;\n- Example: COPY &USEPATHAASD/E, BAS*F/G\n- Example result: *DIR/SHARED/PRODUCTION/A and *DIR/SHARED/PRODUCTION/B were copied to SHAREDFILES.\n- DATAPATH=*DIR/SHARED/PRODUCTIONONSHAREDFILES, (*)ON DISK is an attribute used in an example."
  },
  {
    "text": "- The ON TASKFAULT statement handles task fault interrupts by queuing them.\n- After the ON TASKFAULT statement is executed, queued task faults are processed.\n- The ON TASKFAULT statement can be invoked multiple times for each task fault.\n- The ON TASKFAULT statement continues execution until all queued task faults are processed.\n- The ON TASKFAULT statement disables the TASKFAULT condition to prevent abnormal task termination.\n- The RESTART condition can be enabled or disabled using the ONRESTART statement.\n- Enabling the RESTART condition allows the job to resume from the specified point upon restart.\n- The ON RESTART statement is commonly used to reset values for task and file variables after a halt/load."
  },
  {
    "text": "- Constraints are used in a railroad diagram to control progression through the diagram.\n- Constraints consist of symbols and unique railroad diagram line paths.\n- Symbols used in constraints include vertical bars, percent signs, and right arrows.\n- Required items in constraints can be constants, variables, or punctuation.\n- Vertical bar (|) signifies the end of a railroad diagram with the option for another command or statement.\n- Percent sign (%) indicates that the command or statement must be on a line by itself.\n- Right arrow (>) is used when the diagram extends to the next line and appears at the line breaks.\n- A loop and bridge are examples of constraints in railroad diagrams."
  }
]